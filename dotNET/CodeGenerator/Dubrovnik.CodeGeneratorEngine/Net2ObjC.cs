// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Dubrovnik
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Text;
    using System.Linq;
    using System.Reflection;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class Net2ObjC : Net2ObjCBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            
            #line 9 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

//     .Net to Objective-C code generator
//
//     This template will generate Objective-C bindings  for each class
//     defined in the input assembly file.
//
//     The wrapper files will generate references to the mono Dubrovnik project to provide
//     access to embedded Mono runtime structures.
//
//      refs:
//      Generating multiple outputs
//      http://www.olegsych.com/2008/03/how-to-generate-multiple-outputs-from-single-t4-template/
//      Dealing with complexity
//      http://msdn.microsoft.com/en-us/magazine/hh975350.aspx
//

// This control block code will be integrated into the TransformText method of Net2ObjC.cs
_TransformText();


            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 29 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

//
// Class feature control blocks.
//

//
//  WriteFileBanner() 
//
void WriteFileBanner() 
{

        
        #line default
        #line hidden
        
        #line 39 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("//------------------------------------------------------------------------------\r" +
        "\n// <auto-generated>\r\n//\r\n// ");

        
        #line default
        #line hidden
        
        #line 43 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(OutputFileType == OutputType.Implementation ? ImplementationFile : InterfaceFile));

        
        #line default
        #line hidden
        
        #line 43 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n//\r\n// Dubrovnik based OS X Cocoa Objective-C to Mono bindings.\r\n//\r\n// This co" +
        "de was generated using a tool available as part of:\r\n// http://github.com/Thesau" +
        "rusSoftware/Dubrovnik\r\n// This code has dependencies on the above project.\r\n//\r\n" +
        "// Date:     ");

        
        #line default
        #line hidden
        
        #line 51 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.ToString()));

        
        #line default
        #line hidden
        
        #line 51 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n//\r\n// Assembly: ");

        
        #line default
        #line hidden
        
        #line 53 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyFacet.Name));

        
        #line default
        #line hidden
        
        #line 53 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n// Fullname: ");

        
        #line default
        #line hidden
        
        #line 54 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyFacet.FullName));

        
        #line default
        #line hidden
        
        #line 54 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n// Path:     ");

        
        #line default
        #line hidden
        
        #line 55 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyFacet.Path));

        
        #line default
        #line hidden
        
        #line 55 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n//\r\n// Platform: ");

        
        #line default
        #line hidden
        
        #line 57 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(Environment.OSVersion.VersionString));

        
        #line default
        #line hidden
        
        #line 57 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n// OS Arch:  ");

        
        #line default
        #line hidden
        
        #line 58 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(Environment.Is64BitOperatingSystem ? "64 bit" : "32 bit"));

        
        #line default
        #line hidden
        
        #line 58 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n// Process:  ");

        
        #line default
        #line hidden
        
        #line 59 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(Environment.Is64BitProcess ? "64 bit" : "32 bit"));

        
        #line default
        #line hidden
        
        #line 59 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n// Target:   ");

        
        #line default
        #line hidden
        
        #line 60 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(GetTargetFrameworkVersion()));

        
        #line default
        #line hidden
        
        #line 60 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n// Runtime:  ");

        
        #line default
        #line hidden
        
        #line 61 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(Environment.Version.ToString()));

        
        #line default
        #line hidden
        
        #line 61 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 62 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

	// write references info	
	foreach (CodeFacet reference in AssemblyFacet.References)
	{

        
        #line default
        #line hidden
        
        #line 66 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("//\r\n// Asm Ref:  ");

        
        #line default
        #line hidden
        
        #line 68 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(reference.Name));

        
        #line default
        #line hidden
        
        #line 68 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n// Fullname: ");

        
        #line default
        #line hidden
        
        #line 69 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(reference.FullName));

        
        #line default
        #line hidden
        
        #line 69 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 70 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

	}

        
        #line default
        #line hidden
        
        #line 72 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(@"//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------
");

        
        #line default
        #line hidden
        
        #line 79 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

}

//
// WriteInterfaceFilePreliminaries
//
public void WriteInterfaceFilePreliminaries()
{
	string objCAssemblyHeaderName = AssemblyFacet.Name;
	string defineName = ("Include_" + ObjCNameFromMonoName(objCAssemblyHeaderName) + "_Extra").ToUpper();
	

        
        #line default
        #line hidden
        
        #line 90 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("#import <Cocoa/Cocoa.h>\r\n#import <Dubrovnik/Dubrovnik.h>\r\n\r\n//\r\n// Extra include\r" +
        "\n//\r\n#ifdef ");

        
        #line default
        #line hidden
        
        #line 97 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(defineName));

        
        #line default
        #line hidden
        
        #line 97 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n#import \"");

        
        #line default
        #line hidden
        
        #line 98 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCAssemblyHeaderName));

        
        #line default
        #line hidden
        
        #line 98 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(".__Extra__.h\"\t// Not auto generated. Add manually to project.\r\n#endif\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 101 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

	if ( AssemblyFacet.References.Count() > 0) {

        
        #line default
        #line hidden
        
        #line 103 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n//\r\n// Referenced assemblies\r\n//\r\n");

        
        #line default
        #line hidden
        
        #line 108 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

    }

	foreach (CodeFacet reference in AssemblyFacet.References)
	{
		string includeFile = reference.Name;
		defineName = (ObjCNameFromMonoName(includeFile) + "_Included").ToUpper();

        
        #line default
        #line hidden
        
        #line 115 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("#ifndef ");

        
        #line default
        #line hidden
        
        #line 116 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(defineName));

        
        #line default
        #line hidden
        
        #line 116 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n//#import \"");

        
        #line default
        #line hidden
        
        #line 117 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(includeFile));

        
        #line default
        #line hidden
        
        #line 117 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(".h\"\r\n#endif\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 120 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
  
	}

	bool commentOutput = false;
	foreach (NamespaceFacet @namespace in AssemblyFacet.Namespaces)
	{
		// collect facets that render as Obj-C classes
		IList<CodeFacet> facets = new List<CodeFacet>();
		facets.AddRange(@namespace.Classes);
		facets.AddRange(@namespace.Interfaces);
		facets.AddRange(@namespace.Structs);
		if (ImplementEnumerationsAsClasses) {
			facets.AddRange(@namespace.Enumerations);
        }

		// write class predeclarations 
		if (facets.Count() > 0 && !commentOutput) {

        
        #line default
        #line hidden
        
        #line 137 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n//\r\n// Forward class declarations and class aliases\r\n//\r\n");

        
        #line default
        #line hidden
        
        #line 142 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
     
			commentOutput = true;   
		}

		foreach (CodeFacet facet in facets)
		{
			WriteClassPredeclaration(facet);
		}	
	}	
}

//
// WriteClassPredeclaration
//
public void WriteClassPredeclaration(CodeFacet facet)
{
	string namespacePrefix = ObjCAcronymFromMonoName(facet.TypeNamespace);
	string classDefine = ObjCNameFromMonoName(namespacePrefix, facet.Name) + "_";
	string classObjCType = facet.ObjCFacet.Type;


        
        #line default
        #line hidden
        
        #line 162 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("@class ");

        
        #line default
        #line hidden
        
        #line 163 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(classObjCType));

        
        #line default
        #line hidden
        
        #line 163 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(";\r\n#ifdef ");

        
        #line default
        #line hidden
        
        #line 164 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(classDefine));

        
        #line default
        #line hidden
        
        #line 164 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n#warning ");

        
        #line default
        #line hidden
        
        #line 165 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(classDefine));

        
        #line default
        #line hidden
        
        #line 165 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(" class name collision.\r\n#else\r\n#define ");

        
        #line default
        #line hidden
        
        #line 167 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(@classDefine));

        
        #line default
        #line hidden
        
        #line 167 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 167 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(@classObjCType));

        
        #line default
        #line hidden
        
        #line 167 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n#endif\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 170 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
	
}

//
// WritePragmaMark
//
public void WritePragmaMark(string info)
{

        
        #line default
        #line hidden
        
        #line 178 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n#pragma mark -\r\n#pragma mark ");

        
        #line default
        #line hidden
        
        #line 181 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(info));

        
        #line default
        #line hidden
        
        #line 181 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 182 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
	
}

//
// WriteImplementationFilePreliminaries
//
public void WriteImplementationFilePreliminaries()
{
}

//
// WriteClass
//
public void WriteClass(ClassFacet @class)
{
	// prefix defines interface or implementation
	string classPrefix = OutputDelarationPrefix();
	string superClass = OutputDelarationSuffix(@class);
	string outputFile = @class.OutputFileName() + OutputFileSuffix();

        
        #line default
        #line hidden
        
        #line 201 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n//++AutoGen ");

        
        #line default
        #line hidden
        
        #line 203 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(outputFile));

        
        #line default
        #line hidden
        
        #line 203 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n//\r\n// Managed class : ");

        
        #line default
        #line hidden
        
        #line 205 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(@class.Name));

        
        #line default
        #line hidden
        
        #line 205 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n//\r\n@");

        
        #line default
        #line hidden
        
        #line 207 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(classPrefix));

        
        #line default
        #line hidden
        
        #line 207 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 207 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(@class.ObjCFacet.Type));

        
        #line default
        #line hidden
        
        #line 207 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(superClass));

        
        #line default
        #line hidden
        
        #line 207 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 208 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
		
	WriteFacetAsClassSetup(@class);
	WriteConstructors(@class.Constructors);
	WriteFields(@class.Fields);
	WriteProperties(@class.Properties);
	WriteMethods(@class.Methods);

        
        #line default
        #line hidden
        
        #line 214 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("@end\r\n//-- \r\n");

        
        #line default
        #line hidden
        
        #line 217 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

}

//
// WriteFacetAsClassSetup
// 
public void WriteFacetAsClassSetup(CodeFacet facet)
{
	WritePragmaMark("Setup");

        
        #line default
        #line hidden
        
        #line 226 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\t// obligatory override\r\n\t+ (const char *)monoClassName");

        
        #line default
        #line hidden
        
        #line 228 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(LT));

        
        #line default
        #line hidden
        
        #line 228 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 229 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

	if (OutputFileType == OutputType.Implementation) 
	{

        
        #line default
        #line hidden
        
        #line 232 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\t{\r\n\t\treturn \"");

        
        #line default
        #line hidden
        
        #line 234 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(facet.TypeNamespace));

        
        #line default
        #line hidden
        
        #line 234 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(".");

        
        #line default
        #line hidden
        
        #line 234 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(facet.Name));

        
        #line default
        #line hidden
        
        #line 234 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\";\r\n\t}\r\n");

        
        #line default
        #line hidden
        
        #line 236 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

    }

        
        #line default
        #line hidden
        
        #line 238 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\t// obligatory override\r\n\t+ (const char *)monoAssemblyName");

        
        #line default
        #line hidden
        
        #line 240 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(LT));

        
        #line default
        #line hidden
        
        #line 240 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 241 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
	
	if (OutputFileType == OutputType.Implementation) 
	{

        
        #line default
        #line hidden
        
        #line 244 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\t{\r\n\t\treturn \"");

        
        #line default
        #line hidden
        
        #line 246 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyFacet.Name));

        
        #line default
        #line hidden
        
        #line 246 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\";\r\n\t}\r\n");

        
        #line default
        #line hidden
        
        #line 248 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

    }

}

//
// WriteStruct
//
public void WriteStruct(StructFacet @struct)
{
	// prefix defines interface or implementation
	string classPrefix = OutputDelarationPrefix();
	string superClass = OutputDelarationSuffix(@struct);
	string outputFile = @struct.OutputFileName() + OutputFileSuffix();

        
        #line default
        #line hidden
        
        #line 262 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n//++AutoGen ");

        
        #line default
        #line hidden
        
        #line 264 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(outputFile));

        
        #line default
        #line hidden
        
        #line 264 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n//\r\n// Managed struct : ");

        
        #line default
        #line hidden
        
        #line 266 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(@struct.Name));

        
        #line default
        #line hidden
        
        #line 266 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n//\r\n@");

        
        #line default
        #line hidden
        
        #line 268 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(classPrefix));

        
        #line default
        #line hidden
        
        #line 268 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 268 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(@struct.ObjCFacet.Type));

        
        #line default
        #line hidden
        
        #line 268 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(superClass));

        
        #line default
        #line hidden
        
        #line 268 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 269 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
		
	WriteFacetAsClassSetup(@struct);
	WriteConstructors(@struct.Constructors);
	WriteFields(@struct.Fields);
	WriteProperties(@struct.Properties);
	WriteMethods(@struct.Methods);

        
        #line default
        #line hidden
        
        #line 275 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("@end\r\n//--\r\n");

        
        #line default
        #line hidden
        
        #line 278 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

}

//
// WriteInterface
//
public void WriteInterface(InterfaceFacet @interface)
{
	// prefix defines interface or implementation
	string classPrefix = OutputDelarationPrefix();
	string superClass = OutputDelarationSuffix(@interface);
	string outputFile = @interface.OutputFileName() + OutputFileSuffix();

        
        #line default
        #line hidden
        
        #line 290 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n//++AutoGen ");

        
        #line default
        #line hidden
        
        #line 292 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(outputFile));

        
        #line default
        #line hidden
        
        #line 292 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n//\r\n// Managed interface : ");

        
        #line default
        #line hidden
        
        #line 294 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(@interface.Name));

        
        #line default
        #line hidden
        
        #line 294 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n//\r\n@");

        
        #line default
        #line hidden
        
        #line 296 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(classPrefix));

        
        #line default
        #line hidden
        
        #line 296 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 296 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(@interface.ObjCFacet.Type));

        
        #line default
        #line hidden
        
        #line 296 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(superClass));

        
        #line default
        #line hidden
        
        #line 296 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 297 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
		
	WriteFacetAsClassSetup(@interface);	
	WriteProperties(@interface.Properties);
	WriteMethods(@interface.Methods);

        
        #line default
        #line hidden
        
        #line 301 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("@end\r\n//-- \r\n");

        
        #line default
        #line hidden
        
        #line 304 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

}

//
// WriteEnumeration
//
public void WriteEnumeration(EnumerationFacet enumeration)
{
	string objCEnumType = ObjCTypeNameFromMonoTypeName(enumeration.UnderlyingType);
	string objCType = ObjCTypeNameFromMonoTypeName(enumeration.Type);
	string outputFile = enumeration.OutputFileName() + OutputFileSuffix();

	// output the enums as a typedef.
	// note that we could also generate a class based definition.
	// it remains to be seen whether this is necessary.
	if (OutputFileType == OutputType.Interface) 
	{
		if (!ImplementEnumerationsAsClasses) {

        
        #line default
        #line hidden
        
        #line 322 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n//++AutoGen ");

        
        #line default
        #line hidden
        
        #line 324 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(outputFile));

        
        #line default
        #line hidden
        
        #line 324 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n//\r\n// Managed enumeration : ");

        
        #line default
        #line hidden
        
        #line 326 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(enumeration.Type));

        
        #line default
        #line hidden
        
        #line 326 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n//\r\ntypedef NS_ENUM(");

        
        #line default
        #line hidden
        
        #line 328 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCEnumType));

        
        #line default
        #line hidden
        
        #line 328 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(", ");

        
        #line default
        #line hidden
        
        #line 328 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCType));

        
        #line default
        #line hidden
        
        #line 328 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(") {\r\n");

        
        #line default
        #line hidden
        
        #line 329 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

			foreach (FieldFacet field in enumeration.Fields) {
				string objCFieldName = ObjCNameFromMonoName(field.Name);

        
        #line default
        #line hidden
        
        #line 332 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\t");

        
        #line default
        #line hidden
        
        #line 333 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCType));

        
        #line default
        #line hidden
        
        #line 333 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("_");

        
        #line default
        #line hidden
        
        #line 333 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCFieldName));

        
        #line default
        #line hidden
        
        #line 333 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 333 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.ConstantValue));

        
        #line default
        #line hidden
        
        #line 333 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(",\r\n");

        
        #line default
        #line hidden
        
        #line 334 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

			}

        
        #line default
        #line hidden
        
        #line 336 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("};\r\n//--\r\n");

        
        #line default
        #line hidden
        
        #line 339 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

		}	else {
			throw new Exception("Enumerations as classes not implemented");
		}
    } 

}

//
// WriteFacetAsAccessor
//
public void WriteFacetAsAccessor(CodeFacet facet)
{
	string accessorName = facet.Name;
	string getterName = accessorName.FirstCharacterToLower();
	string setterName = "set" + accessorName.FirstCharacterToUpper();
	string accessorType = facet.Type;
	string objCTypeDecl = ObjCTypeDeclFromMonoFacet(facet);

	// create Obj-C representation of mono object
	string monoValueToObjC = MonoValueToObjc(MonoVariableName, facet);
	string objCValueToMono = ObjCValueToMono(ObjCVariableName, objCTypeDecl, facet);
	if (facet.Type == "U") {
    int i = 0;
	}
	ObjCTypeAssociation objCTypeAssociate = ObjCTypeAssociate(facet);

	string objCMethodType = !facet.IsStatic ? "-" : "+";
	string getFormat, setFormat;
	if (facet is PropertyFacet) {
		if (!facet.IsStatic) {
			getFormat = "[self getMonoProperty:\"{0}\"]";
			setFormat = "[self setMonoProperty:\"{0}\" valueObject:{1}]";
		} else {
			getFormat = "[[self class] getMonoClassProperty:\"{0}\"]";
			setFormat = "[[self class] setMonoClassProperty:\"{0}\" valueObject:{1}]";
        }
	} else if (facet is FieldFacet) {
		// note different field getter signature.
		// valueObject is a pointer to storage for both value and reference types.
		if (!facet.IsStatic) {
			getFormat = "[self getMonoField:\"{0}\" valuePtr:DB_PTR({1})]";
			setFormat = "[self setMonoField:\"{0}\" valueObject:{1}]";
		} else {
			getFormat = "[[self class] getMonoClassField:\"{0}\" valuePtr:DB_PTR({1})]";
			setFormat = "[[self class] setMonoClassField:\"{0}\" valueObject:{1}]";
        }
    } else {
		throw new Exception("Cannot write facet as accessor");
    }

	string getExpression = String.Format(getFormat, accessorName, MonoVariableName);
	string setExpression = String.Format(setFormat, accessorName, MonoVariableName);

	//
	// write getter
	//
	if (facet.IsReadable) {

        
        #line default
        #line hidden
        
        #line 397 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n\t// Managed type : ");

        
        #line default
        #line hidden
        
        #line 399 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(WriteFacetTypeInfo(facet)));

        
        #line default
        #line hidden
        
        #line 399 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n    ");

        
        #line default
        #line hidden
        
        #line 400 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCMethodType));

        
        #line default
        #line hidden
        
        #line 400 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(" (");

        
        #line default
        #line hidden
        
        #line 400 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCTypeDecl));

        
        #line default
        #line hidden
        
        #line 400 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(")");

        
        #line default
        #line hidden
        
        #line 400 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(getterName));

        
        #line default
        #line hidden
        
        #line 400 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(LT));

        
        #line default
        #line hidden
        
        #line 400 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 401 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
		
		if (OutputFileType == OutputType.Implementation) 
		{

        
        #line default
        #line hidden
        
        #line 404 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("    {\r\n");

        
        #line default
        #line hidden
        
        #line 406 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

			if (facet is PropertyFacet) {

        
        #line default
        #line hidden
        
        #line 408 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\t\tMonoObject * ");

        
        #line default
        #line hidden
        
        #line 409 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(MonoVariableName));

        
        #line default
        #line hidden
        
        #line 409 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 409 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(getExpression));

        
        #line default
        #line hidden
        
        #line 409 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(";\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 410 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCTypeDecl));

        
        #line default
        #line hidden
        
        #line 410 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(" result = ");

        
        #line default
        #line hidden
        
        #line 410 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(monoValueToObjC));

        
        #line default
        #line hidden
        
        #line 410 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 411 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
		
				WriteFacetGenericsToObjCResult(facet);
				

        
        #line default
        #line hidden
        
        #line 414 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\t\treturn result;\r\n\t}\r\n");

        
        #line default
        #line hidden
        
        #line 417 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
	
            } else if (facet is FieldFacet) {

				string returnExpression;
				string valueTypeDecl = objCTypeDecl;
				if (objCTypeAssociate == null || objCTypeAssociate.IsNSObject) {
					returnExpression = monoValueToObjC;
					valueTypeDecl = "MonoObject *";
				} else {
					returnExpression = MonoVariableName;
                }
 
        
        #line default
        #line hidden
        
        #line 428 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\t\t");

        
        #line default
        #line hidden
        
        #line 429 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(valueTypeDecl));

        
        #line default
        #line hidden
        
        #line 429 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 429 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(MonoVariableName));

        
        #line default
        #line hidden
        
        #line 429 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(";\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 430 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(getExpression));

        
        #line default
        #line hidden
        
        #line 430 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(";\r\n\t\treturn ");

        
        #line default
        #line hidden
        
        #line 431 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(returnExpression));

        
        #line default
        #line hidden
        
        #line 431 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(";\r\n\t}\r\n");

        
        #line default
        #line hidden
        
        #line 433 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
			}
		} // if Implementation
    } // if IsReadable

	//
	// write setter
	//
	if (facet.IsWritable) {


        
        #line default
        #line hidden
        
        #line 442 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("    ");

        
        #line default
        #line hidden
        
        #line 443 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCMethodType));

        
        #line default
        #line hidden
        
        #line 443 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(" (void)");

        
        #line default
        #line hidden
        
        #line 443 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(setterName));

        
        #line default
        #line hidden
        
        #line 443 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(":(");

        
        #line default
        #line hidden
        
        #line 443 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCTypeDecl));

        
        #line default
        #line hidden
        
        #line 443 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(")value");

        
        #line default
        #line hidden
        
        #line 443 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(LT));

        
        #line default
        #line hidden
        
        #line 443 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 444 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

		if (OutputFileType == OutputType.Implementation) 
		{

        
        #line default
        #line hidden
        
        #line 447 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\t{\r\n\t\tMonoObject *");

        
        #line default
        #line hidden
        
        #line 449 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(MonoVariableName));

        
        #line default
        #line hidden
        
        #line 449 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 449 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCValueToMono));

        
        #line default
        #line hidden
        
        #line 449 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(";\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 450 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(setExpression));

        
        #line default
        #line hidden
        
        #line 450 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(";          \r\n\t}\r\n");

        
        #line default
        #line hidden
        
        #line 452 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

        }  // if Implementation
    } // if IsWritable
}

//
// WriteFacetGenericsToObjCResult
//
public void WriteFacetGenericsToObjCResult(CodeFacet facet)
{

#warning All code paths that return results need this processing
	if (facet.IsConstructedGenericType) {
		string objCGenericArgumentTypeNames = ObjCGenericArgumentTypeNamesStringFromMonoFacet(facet);

        
        #line default
        #line hidden
        
        #line 466 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\t\tresult.monoGenericTypeArgumentNames = @\"");

        
        #line default
        #line hidden
        
        #line 467 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCGenericArgumentTypeNames));

        
        #line default
        #line hidden
        
        #line 467 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\";\r\n");

        
        #line default
        #line hidden
        
        #line 468 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

    }
}

//
// WriteFacetAsMethod
//
public void WriteFacetAsMethod(MethodFacet facet)
{
	string monoMethodName = facet.Name;
	string objCMethodFormat = null;
	string objCMethodName = null;
	bool isConstructorMethod = (facet.Name == null);	// constructor has no method name
	string objCMethodType = facet.IsStatic || isConstructorMethod ? "+" : "-";
	string objCTypeDecl = ObjCTypeDeclFromMonoFacet(facet);	
	string monoValueToObjC = null;

	// instance method requires a name and type
	if (!isConstructorMethod) {

		objCMethodName = monoMethodName.FirstCharacterToLower();

		// create Obj-C representation of mono object
		monoValueToObjC = MonoValueToObjc(MonoVariableName, facet);

		if (!facet.IsStatic) {
			objCMethodFormat = "[self invokeMonoMethod:\"{0}({1})\" withNumArgs:{2}]";
		} else {
			objCMethodFormat = "[[self class] invokeMonoClassMethod:\"{0}({1})\" withNumArgs:{1}]";
		}
	} else {

		// this looks like a default constructor
		if (facet.Parameters.Count() == 0) {
			return;
        }

		objCMethodName = "new";

		// a constructor requires no explicit name or type
		objCMethodFormat = "[[self alloc] initWithSignature:\"{1}\" withNumArgs:{2}]";
    }

	// build the argument lists
	StringBuilder monoSigBuilder = new StringBuilder();
	StringBuilder methodArgsBuilder = new StringBuilder();
	StringBuilder invokeArgsBuilder = new StringBuilder();
	int idx = 0;
	foreach (ParameterFacet parameter in facet.Parameters) {

		// if the mono parameters is passed by ref then strip
		// the suffix to enable type association
		string monoParameterType = parameter.Type;
		if (parameter.IsByRef) {
			monoParameterType = monoParameterType.Replace("&", "");
        }

		//
		// build the ObjC method interleaved parameter representation
		//  eg: name1:(int32_t)p1 name2:(int64_t)p2 name3:(NSString *)p3
		//
		string objCParamTypeDecl = null;
		bool objCParameterIsObject = true;

		// get the associated ObjC type
		ObjCTypeAssociation objCTypeAssociate = ObjCTypeAssociate(parameter);
		MonoTypeAssociation monoTypeAssociate = null;
		if (objCTypeAssociate != null) {
			monoTypeAssociate = objCTypeAssociate.MonoTypeAssociate;
			objCParamTypeDecl =  objCTypeAssociate.ObjCTypeDecl;
			objCParameterIsObject = objCTypeAssociate.IsNSObject;
		} else {
			objCParamTypeDecl = ObjCTypeDeclFromMonoFacet(parameter);
			objCParameterIsObject = ObjCNonAssociatedTypeIsNSObject(parameter);
        }
		if (parameter.IsByRef) {
			objCParamTypeDecl += "*";	// add additional indirection
        }

		//
		// build the mono method argument signature
		// eg: int,long,string
		// use a type associate if available.
		// if not then default to the parameter type
		//
		if (idx > 0) monoSigBuilder.Append(",");
		string monoMethodParameterType = null;
		if (monoTypeAssociate != null) monoMethodParameterType = monoTypeAssociate.MonoTypeInvoke;
		if (monoMethodParameterType == null) monoMethodParameterType = monoParameterType;
		monoSigBuilder.Append(monoMethodParameterType);
		if (parameter.IsByRef) {
			monoSigBuilder.Append("&");	// the signature needs to express by ref
        }

		// Build ObjC parameter name.
		// In order to represent overloaded methods effectively the 
		// ObjC paramter name is constructed as follows:
		// Mono parameter name + Mono parameter type + Ref
		string objCParamName = ObjCNameFromMonoName(parameter.Name);

		// We adopt a minimal as opposed to a full type repesentation here.
		// Time will tell how it flies.
		string objCParamOverloadSuffix = ObjCMinimalNameFromMonoName(monoMethodParameterType);
		if (parameter.IsByRef) {
			objCParamOverloadSuffix += "Ref";
        }
		objCParamName += objCParamOverloadSuffix.FirstCharacterToUpper();

		// append the complete interleaved parameter expression
		if (idx == 0) {
			if (AppendFirstArgSignatureToMethodName) {
				// the leading underscore helps identify the preceding characters as the managed method name
				objCMethodName += "_with";
				methodArgsBuilder.AppendFormat("{0}", objCParamName.FirstCharacterToUpper());
            } 
        } else {
			methodArgsBuilder.AppendFormat(" {0}", objCParamName.FirstCharacterToLower());
        }
		methodArgsBuilder.AppendFormat(":({0})p{1}", objCParamTypeDecl, idx + 1);

		//
		// build the mono invocation argument representation
		// eg: DB_VALUE(p1), DB_VALUE(p2), [p3 monoValue]
		//
		string argFormat = null;
		if (idx > 0) invokeArgsBuilder.Append(", ");
		if (objCParameterIsObject) {
			argFormat = "[p{0} monoValue]";
        } else {
			if (!parameter.IsByRef) {
				argFormat = "DB_VALUE(p{0})";	// DB_VALUE equates to &
            } else {
				argFormat = "p{0}";	// just pass the pointer
            }
		}
		invokeArgsBuilder.AppendFormat(argFormat, idx + 1);

		idx++;
    }

	// finalize arugment list representations
	string monoMethodSig = monoSigBuilder.ToString();
	string methodArgs = methodArgsBuilder.ToString();
	string invokeArgs = facet.Parameters.Count().ToString();
	if (facet.Parameters.Count() > 0) {
		invokeArgs += ", " + invokeArgsBuilder.ToString();
    }

	string getExpression = String.Format(objCMethodFormat, monoMethodName, monoMethodSig, invokeArgs);

	// validation
	if (isConstructorMethod && String.IsNullOrEmpty(monoMethodSig)) throw new Exception("Mono method argument signature is empty");
	if (String.IsNullOrEmpty(objCTypeDecl)) throw new Exception("ObjC type delaration is empty");    
	if (String.IsNullOrEmpty(objCMethodName)) throw new Exception("Method name is empty"); 
	if (String.IsNullOrEmpty(getExpression)) throw new Exception("Get expression is empty"); 

	//
	// write method
	//

        
        #line default
        #line hidden
        
        #line 627 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n\t// Managed method name : ");

        
        #line default
        #line hidden
        
        #line 629 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(isConstructorMethod ? ".ctor" : monoMethodName));

        
        #line default
        #line hidden
        
        #line 629 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n\t// Managed return type : ");

        
        #line default
        #line hidden
        
        #line 630 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(WriteFacetTypeInfo(facet)));

        
        #line default
        #line hidden
        
        #line 630 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n\t// Managed param types : ");

        
        #line default
        #line hidden
        
        #line 631 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(WriteFacetTypeInfo(facet.Parameters)));

        
        #line default
        #line hidden
        
        #line 631 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n    ");

        
        #line default
        #line hidden
        
        #line 632 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCMethodType));

        
        #line default
        #line hidden
        
        #line 632 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(" (");

        
        #line default
        #line hidden
        
        #line 632 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCTypeDecl));

        
        #line default
        #line hidden
        
        #line 632 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(")");

        
        #line default
        #line hidden
        
        #line 632 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCMethodName));

        
        #line default
        #line hidden
        
        #line 632 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(methodArgs));

        
        #line default
        #line hidden
        
        #line 632 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(LT));

        
        #line default
        #line hidden
        
        #line 632 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 633 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
		
	if (OutputFileType == OutputType.Implementation) 
	{
		// type warnings
		GenerateTypeWarnings(facet);
		GenerateTypeWarnings(facet.Parameters);

        
        #line default
        #line hidden
        
        #line 639 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("    {\r\n");

        
        #line default
        #line hidden
        
        #line 641 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

		if (objCTypeDecl == "void") {

        
        #line default
        #line hidden
        
        #line 643 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\t\t");

        
        #line default
        #line hidden
        
        #line 644 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(getExpression));

        
        #line default
        #line hidden
        
        #line 644 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 645 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

		} else if (isConstructorMethod) {

        
        #line default
        #line hidden
        
        #line 647 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\t\treturn ");

        
        #line default
        #line hidden
        
        #line 648 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(getExpression));

        
        #line default
        #line hidden
        
        #line 648 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 649 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

		} else {
			if (String.IsNullOrEmpty(monoValueToObjC)) throw new Exception("Mono value to ObjC expression is empty"); 

        
        #line default
        #line hidden
        
        #line 652 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("\t\tMonoObject *");

        
        #line default
        #line hidden
        
        #line 653 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(MonoVariableName));

        
        #line default
        #line hidden
        
        #line 653 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 653 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(getExpression));

        
        #line default
        #line hidden
        
        #line 653 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(";\r\n\t\treturn ");

        
        #line default
        #line hidden
        
        #line 654 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(monoValueToObjC));

        
        #line default
        #line hidden
        
        #line 654 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 655 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
	
		}// if objCTypeDecl

        
        #line default
        #line hidden
        
        #line 657 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"
this.Write("    }\r\n");

        
        #line default
        #line hidden
        
        #line 659 "Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\CodeGenerator\Dubrovnik.CodeGeneratorEngine\Net2ObjC.tt"

	} // if Implementation
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class Net2ObjCBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
