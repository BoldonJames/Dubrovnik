
<#@ template language="C#" debug="True" hostspecific="true"#>
<#@ output extension="log" #>
<#@ import namespace="System.Collections"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Reflection"#>
<#
//     .Net to Objective-C code generator
//
//     This template will generate Objective-C bindings  for each class
//     defined in the input assembly file.
//
//     The wrapper files will generate references to the mono Dubrovnik project to provide
//     access to embedded Mono runtime structures.
//
//      refs:
//      Generating multiple outputs
//      http://www.olegsych.com/2008/03/how-to-generate-multiple-outputs-from-single-t4-template/
//      Dealing with complexity
//      http://msdn.microsoft.com/en-us/magazine/hh975350.aspx
//

// This control block code will be integrated into the TransformText method of Net2ObjC.cs
_TransformText();

#>
<#+
//
// Class feature control blocks.
//

//
//  WriteFileBanner() 
//
void WriteFileBanner() 
{
#>
//------------------------------------------------------------------------------
// <auto-generated tool="<#=GenToolName#>">
//
// <#=OutputFileType == OutputType.Implementation ? ImplementationFile : InterfaceFile #>
//
// Dubrovnik based OS X Cocoa Objective-C to Mono bindings.
//
// This code was generated using a tool available as part of:
// http://github.com/ThesaurusSoftware/Dubrovnik
// This code has dependencies on the above project.
//
// Date:     <#=TimeStamp#>
//
// Assembly: <#=AssemblyFacet.Name#>
// Fullname: <#=AssemblyFacet.FullName#>
// Path:     <#=AssemblyFacet.Path#>
//
// Platform: <#=Environment.OSVersion.VersionString#>
// OS Arch:  <#=Environment.Is64BitOperatingSystem ? "64 bit" : "32 bit"#>
// Process:  <#=Environment.Is64BitProcess ? "64 bit" : "32 bit"#>
// Target:   <#=GetTargetFrameworkVersion()#>
// Runtime:  <#=Environment.Version.ToString()#>
<#+
	// write references info	
	foreach (CodeFacet reference in AssemblyFacet.References)
	{
#>
//
// Asm Ref:  <#=reference.Name#>
// Fullname: <#=reference.FullName#>
<#+
	}
#>
//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------
<#+
}

//
// WriteModuleBanner
//
public void WriteModuleBanner(CodeFacet facet, string module)
{
	string outputFile = facet.OutputFileName() + OutputFileSuffix();

	// There is an argument that says - Lets add the date here!
	// However this leads to what I think are excessively noisey commits.
#>

//++<#=GenToolName#> <#=outputFile#>
//
// Managed <#=module#> : <#=facet.Name#>
//
<#+	
	if (OutputFileType == OutputType.Implementation)
    {
		WriteModuleFeatureRequirements();
    }
}

//
// WriteModuleFooter
//
public void WriteModuleFooter()
{
#>
//--<#=GenToolName#>
<#+	
}
//
// WriteInterfaceFilePreliminaries
//
public void WriteInterfaceFilePreliminaries()
{
	string objCAssemblyHeaderName = AssemblyFacet.Name;
	string defineName = ("Include_" + ObjCNameFromManagedName(objCAssemblyHeaderName) + "_Extra").ToUpper();
	
#>
#import <Cocoa/Cocoa.h>
#import <Dubrovnik/Dubrovnik.h>

//
// Extra include
//
#ifdef <#=defineName#>
#import "<#=objCAssemblyHeaderName#>.__Extra__.h"	// Not auto generated. Add manually to project.
#endif

<#+
	if ( AssemblyFacet.References.Count() > 0) 
	{
#>

//
// Referenced assemblies
//
<#+
    }

	foreach (CodeFacet reference in AssemblyFacet.References)
	{
		string includeFile = reference.Name;
		defineName = (ObjCNameFromManagedName(includeFile) + "_Included").ToUpper();
#>
#ifndef <#=defineName#>
//#import "<#=includeFile#>.h"
#endif

<#+  
	}

	bool commentOutput = false;
	foreach (NamespaceFacet @namespace in AssemblyFacet.Namespaces)
	{
		// collect facets that render as Obj-C classes
		IList<CodeFacet> facets = new List<CodeFacet>();
		facets.AddRange(@namespace.Classes);
		facets.AddRange(@namespace.Interfaces);
		facets.AddRange(@namespace.Structs);
		if (ImplementEnumerationsAsClasses) 
		{
			facets.AddRange(@namespace.Enumerations);
        }

		// write class predeclarations 
		if (facets.Count() > 0 && !commentOutput) 
		{
#>

//
// Forward class declarations and class aliases
//
<#+     
			commentOutput = true;   
		}

		foreach (CodeFacet facet in facets)
		{
			WriteClassPredeclaration(facet);
		}	
	}	
}

//
// WriteClassPredeclaration
//
public void WriteClassPredeclaration(CodeFacet facet)
{
	string namespacePrefix = ObjCAcronymFromManagedName(facet.TypeNamespace);
	string classDefine = ObjCTypeFromManagedType(namespacePrefix + facet.Name) + "_";
	string classObjCType = facet.ObjCFacet.Type;

	if (facet.GetType() == typeof(InterfaceFacet)) {
#>
@protocol <#=classObjCType#>;
<#+	
    }
#>
@class <#=classObjCType#>;
#ifdef <#=classDefine#>
#warning <#=classDefine#> class name collision.
#else
#define <#=@classDefine#> <#=@classObjCType#>
#endif

<#+	
}

//
// WritePragmaMark
//
public void WritePragmaMark(string info)
{
#>

#pragma mark -
#pragma mark <#=info#>
<#+	
}

//
// WriteImplementationFilePreliminaries
//
public void WriteImplementationFilePreliminaries()
{
	WriteModuleFeatureRequirements();
}

//
// WriteModuleFeatureRequirements
//
public void WriteModuleFeatureRequirements()
{
#>

// ARC is required
#if  ! __has_feature(objc_arc)
#error This file requires ARC. 
#endif

<#+
}

//
// WriteInterfaceStart
//
public void WriteInterfaceStart(CodeFacet facet, string module)
{
	// Allocate property name list
	this.StaticObjectPropertyStorageNames = new List<string>();

	WriteModuleBanner(facet, module);
#>
@protocol <#=facet.ObjCFacet.Type#> <NSObject>

@required
<#+	
	WriteClassSetup(facet);	
}

//
// WriteInterfaceEnd
//
public void WriteInterfaceEnd(CodeFacet facet)
{
	
	string superClass = OutputDeclarationSuffix(facet);
#>
@end

@interface <#=facet.ObjCFacet.Type#><#=superClass#> <<#=facet.ObjCFacet.Type#>>

@end
<#+
	WriteModuleFooter();
}


//
// WriteClassStart
//
public void WriteClassStart(CodeFacet facet, string module)
{
	// Allocate property name list
	this.StaticObjectPropertyStorageNames = new List<string>();

	// prefix defines interface or implementation
	string classPrefix = OutputDeclarationPrefix();
	string superClass = OutputDeclarationSuffix(facet);
	string implementedProtocols = OutputImplementedProtocolSuffix(facet);

	// implemented protocol support is available but 
	// we are not quite ready to supply all the framework managed interfaces that
	// are commonly referenced
	if (true) {
		implementedProtocols = "";
    }

	WriteModuleBanner(facet, module);
#>
@<#=classPrefix#> <#=facet.ObjCFacet.Type#><#=superClass#><#=implementedProtocols#>
<#+	
	WriteClassSetup(facet);	
}


//
// WriteClassSetup
// 
public void WriteClassSetup(CodeFacet facet)
{
	WritePragmaMark("Setup");
#>
	// obligatory override
	+ (const char *)monoClassName<#=LT#>
<#+
	if (OutputFileType == OutputType.Implementation) 
	{
#>
	{
		return "<#=facet.TypeNamespace#>.<#=facet.RawName#>";
	}
<#+
    }
#>
	// obligatory override
	+ (const char *)monoAssemblyName<#=LT#>
<#+	
	if (OutputFileType == OutputType.Implementation) 
	{
#>
	{
		return "<#=AssemblyFacet.Name#>";
	}
<#+
    }
}

//
// WriteClassEnd
//
public void WriteClassEnd(CodeFacet facet)
{
	WriteClassTeardown(facet);	
#>
@end
<#+
	WriteModuleFooter();
}

//
// WriteClassTeardown
// 
public void WriteClassTeardown(CodeFacet facet)
{
	if (OutputFileType == OutputType.Implementation) 
	{
	WritePragmaMark("Teardown");
#>
	- (void)dealloc
	{
<#+
		foreach (string staticObjectPropertyName in StaticObjectPropertyStorageNames)
        {
#>
		<#=staticObjectPropertyName#> = nil;
<#+
        }
#>
	}
<#+

	this.StaticObjectPropertyStorageNames = null;
    }
}
//
// WriteEnumeration
//
public void WriteEnumeration(EnumerationFacet enumeration)
{
	string objCEnumType = ObjCTypeNameFromManagedTypeName(enumeration.UnderlyingType);
	string objCType = ObjCTypeNameFromManagedTypeName(enumeration.Type);

	// output the enums as a typedef.
	// note that we could also generate a class based definition.
	// it remains to be seen whether this is necessary.
	if (OutputFileType == OutputType.Interface) 
	{
		if (!ImplementEnumerationsAsClasses) 
		{

			WriteModuleBanner(enumeration, "enumeration");
#>
typedef NS_ENUM(<#=objCEnumType#>, <#=objCType#>) {
<#+
			foreach (FieldFacet field in enumeration.Fields) 
			{
				string objCFieldName = ObjCNameFromManagedName(field.Name);
#>
	<#=objCType#>_<#=objCFieldName#> = <#=field.ConstantValue#>,
<#+
			}
#>
};
<#+
			WriteModuleFooter();
		}	
		else 
		{
			throw new Exception("Enumerations as classes not implemented");
		}
    } 

}

//
// WriteFacetAsAccessor
// 
public void WriteFacetAsAccessor(CodeFacet facet)
{
	// define getters and setters
	string accessorName = facet.Name;
	string accessorDescription = facet is PropertyFacet ? "property" : "field";
	string getterName = accessorName.FirstCharacterToLower();
	string setterName = "set" + accessorName.FirstCharacterToUpper();
	string accessorType = facet.Type;
	string objCTypeDecl = ObjCTypeDeclFromMonoFacet(facet);
	bool isObjectProperty = ObjCRepresentationIsObject(facet);
	string monoObjectPtr = "MonoObject *";

	// property storage and evaluation
	string propertyAttributes = "";
	string propertyStorage = "_" + getterName;
	if (facet.IsStatic) 
	{
		propertyStorage = "m" + propertyStorage;
		if (isObjectProperty) 
        {
			this.StaticObjectPropertyStorageNames.Add(propertyStorage);
        }
    }
	string doPropertyEqualityTest = "";
	if (isObjectProperty) 
	{
		// test if mono object pointer and property storage reference the same managed object
		doPropertyEqualityTest = string.Format("if ([self object:{0} isEqualToMonoObject:{1}]) return {0};", propertyStorage, ManagedVariableName);
    }

	// field access
	string fieldAccessExpression ="", fieldAccessTypeDecl = "";

	// instance property.
	if (!facet.IsStatic) 
	{
		string attributes = "nonatomic";

		// object property attributes
		if (ObjCRepresentationIsObject(facet)) 
		{
			attributes += ", strong";
		}
		if (!facet.IsWritable) 
		{
			attributes += ", readonly";
		} 
		propertyAttributes =  String.Format("({0}) ", attributes);
    }

	// create Obj-C representation of managed object
	string managedValueToObjC = ManagedValueToObjc(ManagedVariableName, facet);
	string objCValueToMono = ObjCValueToManaged(ObjCVariableName, objCTypeDecl, facet);
	ObjCTypeAssociation objCTypeAssociate = ObjCTypeAssociate(facet);

	string objCMethodType = !facet.IsStatic ? "-" : "+";
	string getFormat, setFormat;

	// property
	if (facet is PropertyFacet) 
	{
		if (!facet.IsStatic)
		{
			getFormat = "[self getMonoProperty:\"{0}\"]";
			setFormat = "[self setMonoProperty:\"{0}\" valueObject:{1}]";
		} 
		else 
		{
			getFormat = "[[self class] getMonoClassProperty:\"{0}\"]";
			setFormat = "[[self class] setMonoClassProperty:\"{0}\" valueObject:{1}]";
        }

	} 
	// field
	else if (facet is FieldFacet) 
	{
		// note different field getter signature.
		// valueObject is a pointer to storage for both value and reference types.
		if (!facet.IsStatic) 
		{
			getFormat = "[self getMonoField:\"{0}\" valuePtr:DB_PTR({1})]";
			setFormat = "[self setMonoField:\"{0}\" valueObject:{1}]";
		} 
		else 
		{
			getFormat = "[[self class] getMonoClassField:\"{0}\" valuePtr:DB_PTR({1})]";
			setFormat = "[[self class] setMonoClassField:\"{0}\" valueObject:{1}]";
        }

		// field access
		if (isObjectProperty) 
		{
			fieldAccessTypeDecl = monoObjectPtr;
			fieldAccessExpression = managedValueToObjC;
		} 
		else 
		{
			fieldAccessTypeDecl = objCTypeDecl;
			fieldAccessExpression = ManagedVariableName;
        }

    } 
	// invalid facet
	else 
	{
		throw new Exception("Cannot write facet as accessor");
    }

	string getExpression = String.Format(getFormat, accessorName, ManagedVariableName);
	string setExpression = String.Format(setFormat, accessorName, ManagedVariableName);

	// Info comment
#>

	// Managed <#=accessorDescription#> name : <#=accessorName#>
	// Managed <#=accessorDescription#> type : <#=WriteFacetTypeInfo(facet)#>
<#+	
	// Interface 
	if (OutputFileType == OutputType.Interface) 
	{

		// instance property
		if (!facet.IsStatic) 
		{
#>
    @property <#=propertyAttributes#><#=objCTypeDecl#> <#=getterName#>;
<#+	  
			return;
        }    
	} 
	else 
	{
		// implementation

		// instance property
		if (!facet.IsStatic) 
		{
			// synthesize ivar property storage
#>
    @synthesize <#=getterName#> = <#=propertyStorage#>;
<#+		
		} 
		else 
		{
			// declare static property storage
#>
    static <#=objCTypeDecl#> <#=propertyStorage#>;
<#+      
		}
    }

	//
	// write getter method
	//
	if (facet.IsReadable) 
	{
#>
    <#=objCMethodType#> (<#=objCTypeDecl#>)<#=getterName#><#=LT#>
<#+		
		if (OutputFileType == OutputType.Implementation) 
		{
#>
    {
<#+
			if (facet is PropertyFacet) 
			{
#>
		<#=monoObjectPtr#><#=ManagedVariableName#> = <#=getExpression#>;
<#+	
				if (isObjectProperty)
				{
#>
		<#=doPropertyEqualityTest#>					
<#+	
				}
#>
		<#=propertyStorage#> = <#=managedValueToObjC#>;

		return <#=propertyStorage#>;
	}
<#+	
            } 
			else if (facet is FieldFacet) 
			{
 #>
		<#=fieldAccessTypeDecl#> <#=ManagedVariableName#>;
		<#=getExpression#>;
<#+	
				if (isObjectProperty)
				{
#>
		<#=doPropertyEqualityTest#>					
<#+	
				}
#>
		<#=propertyStorage#> = <#=fieldAccessExpression#>;
		return <#=propertyStorage#>;
	}
<#+			}
		} // if Implementation
    } // if IsReadable

	//
	// write setter method
	//
	if (facet.IsWritable) 
	{
#>
    <#=objCMethodType#> (void)<#=setterName#>:(<#=objCTypeDecl#>)<#=ObjCVariableName#><#=LT#>
<#+
		if (OutputFileType == OutputType.Implementation) 
		{
#>
	{
		<#=propertyStorage#> = <#=ObjCVariableName#>;
		<#=monoObjectPtr#><#=ManagedVariableName#> = <#=objCValueToMono#>;
		<#=setExpression#>;          
	}
<#+
        }  // if Implementation
    } // if IsWritable
}

//
// WriteFacetAsMethod
//
public void WriteFacetAsMethod(MethodFacet facet)
{
	// In order to ensure compilation of an assembly and its references 
	// the generated code must resolve all types.
	//
	// The generation of a complete set of methods is obviously desirable
	// but in some cases may not be achievable if a unique method signature 
	// cannot be obtained. 

	// if the method is a duplicate (ie: name, parameter types, return type) 
	// then we have no option but to omit it
	if (facet.IsDuplicateSignatureMethod) 
	{
		this.Warning("Duplicate method omitted : " + facet.Name);
		return;
	}

	// if the facet is overloaded on its signature and differs only in its
	// return type then omit it.
	// This can occur with explicit operators.
	// At present it is unknown if these can be called via the embedded API.
	if (facet.IsOverloadedSignatureMethod) 
	{
		this.Warning("Overloaded signature method omitted : " + facet.Name);
		return;
    }

	string monoMethodName = facet.Name;
	string objCMethodFormat = null;
	string objCMethodName = null;
	bool isConstructorMethod = (facet.Name == null);	// constructor has no method name
	string objCMethodType = facet.IsStatic || isConstructorMethod ? "+" : "-";
	string objCTypeDecl = ObjCTypeDeclFromMonoFacet(facet);	
	string managedValueToObjC = null;

	// instance method requires a name and type
	if (!isConstructorMethod) 
	{

		objCMethodName = monoMethodName.FirstCharacterToLower();

		// create Obj-C representation of mono object
		managedValueToObjC = ManagedValueToObjc(ManagedVariableName, facet);

		if (!facet.IsStatic) 
		{
			objCMethodFormat = "[self invokeMonoMethod:\"{0}({1})\" withNumArgs:{2}]";
		} 
		else 
		{
			objCMethodFormat = "[self invokeMonoClassMethod:\"{0}({1})\" withNumArgs:{2}]";
		}
	}
	 else 
	{

		// this looks like a default constructor
		if (facet.Parameters.Count() == 0) 
		{
			return;
        }

		objCMethodName = "new";

		// a constructor requires no explicit name or type
		objCMethodFormat = "[[self alloc] initWithSignature:\"{1}\" withNumArgs:{2}]";
    }

	// build the parameters
	StringBuilder monoSigBuilder = new StringBuilder();
	StringBuilder objCParameterBuilder = new StringBuilder();
	StringBuilder invokeArgsBuilder = new StringBuilder();
	int idx = 0;
	foreach (ParameterFacet parameter in facet.Parameters) 
	{

		// if the mono parameters is passed by ref then strip
		// the suffix to enable type association
		string monoParameterType = parameter.Type;
		if (parameter.IsByRef || parameter.IsPointer) 
		{
			monoParameterType = parameter.ElementType;
        }

		//
		// build the ObjC method interleaved parameter representation
		//  eg: name1:(int32_t)p1 name2:(int64_t)p2 name3:(NSString *)p3
		//
		string objCParamTypeDecl = null;
		bool objCParameterIsObject = true;

		//
		// Get the ObjC type associated with the parameter.
		//
		ObjCTypeAssociation objCTypeAssociate = ObjCTypeAssociate(parameter);
		ManagedTypeAssociation managedTypeAssociate = null;
		if (objCTypeAssociate != null) 
		{
			//
			// If the parameter is an array, say Int64[], then its Obj-C rep will be System.Array
			// The mono type association however must reflect the represented type, Int64.
			//
			if (parameter.IsArray) 
			{
				ObjCTypeAssociation objCRepresentedTypeAssociate = ObjCTypeAssociate(parameter.ElementType);
				if (objCRepresentedTypeAssociate != null) 
				{
					managedTypeAssociate = objCRepresentedTypeAssociate.ManagedTypeAssociate;
                }
			}
			
			if (managedTypeAssociate == null) 
			{
				managedTypeAssociate = objCTypeAssociate.ManagedTypeAssociate;
			}

			objCParamTypeDecl =  objCTypeAssociate.ObjCTypeDecl;
			objCParameterIsObject = objCTypeAssociate.IsNSObject;
		} 
		else 
		{
			//
			// Generate default objC representations
			//
			objCParamTypeDecl = ObjCTypeDeclFromMonoFacet(parameter);
			objCParameterIsObject = ObjCRepresentationIsObject(parameter);
        }
		if (parameter.IsByRef || parameter.IsPointer) 
		{
			objCParamTypeDecl += "*";	// add additional indirection
        }

		//
		// Build the mono method argument signature
		// eg: int,long,string
		// Use a type associate if available.
		// If not then default to the parameter type
		//
		if (idx > 0) monoSigBuilder.Append(",");
		string monoMethodParameterType = null;

		if (managedTypeAssociate != null) 
		{
			 monoMethodParameterType = managedTypeAssociate.ManagedTypeInvoke;
			if (parameter.IsArray)  
			{
				monoMethodParameterType += "[]";
            }
        }

		if (monoMethodParameterType == null) monoMethodParameterType = monoParameterType;
		monoSigBuilder.Append(monoMethodParameterType);
		if (parameter.IsPointer) 
		{
			monoSigBuilder.Append("*");
        }
		if (parameter.IsByRef) 
		{
			monoSigBuilder.Append("&");	// the signature needs to express by ref
        }

		// Build ObjC parameter name.
		// In order to represent overloaded methods effectively the 
		// ObjC paramter name is constructed as follows:
		// Managed parameter name + Managed parameter type + Ref
		string objCParamName = ObjCNameFromManagedName(parameter.Name);

		// If the method is overloaded by parameter then makes th ObjC method
		// name unique by including type info in the name.
		//
		// Managed methods are overloaded by name only.
		// The Obj-C metjods representation uses interleaved parameters which may
		// be sufficient to produce a unique method signature.
		//
		// If however a managed method overload differs only in the type of its parameters 
		// (the managed method name, parameter count and parameter names all being equal)
		// then the Obj-C interleaved parameters will include type info.
		string objCParamOverloadSuffix = "";
		if (facet.IsOverloadedParameterMethod) 
		{
			// We adopt a minimal as opposed to a full type repesentation here in order
			// to minimize the parameter length.
			// Time will tell how it flies.
			objCParamOverloadSuffix = ObjCMinimalNameFromManagedName(monoMethodParameterType);
        }
		if (parameter.IsByRef) 
		{
			objCParamOverloadSuffix += "Ref";
        }
		if (objCParamOverloadSuffix.Length > 0) 
		{
			objCParamName += objCParamOverloadSuffix.FirstCharacterToUpper();
        }

		// append the complete interleaved parameter expression
		if (idx == 0) 
		{
			if (AppendFirstArgSignatureToMethodName) 
			{
				// the leading underscore helps identify the preceding characters as the managed method name
				objCMethodName += "_with";
				objCParameterBuilder.AppendFormat("{0}", objCParamName.FirstCharacterToUpper());
            } 
        } 
		else 
		{
			objCParameterBuilder.AppendFormat(" {0}", objCParamName.FirstCharacterToLower());
        }
		objCParameterBuilder.AppendFormat(":({0})p{1}", objCParamTypeDecl, idx + 1);

		//
		// build the mono invocation argument representation
		// eg: DB_VALUE(p1), DB_VALUE(p2), [p3 monoValue]
		//
		string argFormat = null;
		if (idx > 0) invokeArgsBuilder.Append(", ");
		if (objCParameterIsObject) 
		{
			argFormat = "[p{0} monoValue]";
        } 
		else 
		{
			if (parameter.IsByRef || parameter.IsPointer) 
			{
				argFormat = "p{0}";	// just pass the pointer
            } 
			else 
			{
				argFormat = "DB_VALUE(p{0})";	// DB_VALUE equates to &
            }
		}
		invokeArgsBuilder.AppendFormat(argFormat, idx + 1);

		idx++;
    }

	// finalize argument list representations
	string monoMethodSig = monoSigBuilder.ToString();
	string objCMethodParameters = objCParameterBuilder.ToString();
	string invokeArgs = facet.Parameters.Count().ToString();
	if (facet.Parameters.Count() > 0) 
	{
		invokeArgs += ", " + invokeArgsBuilder.ToString();
    }

	string getExpression = String.Format(objCMethodFormat, monoMethodName, monoMethodSig, invokeArgs);

	// validation
	if (isConstructorMethod && String.IsNullOrEmpty(monoMethodSig)) throw new Exception("Mono method argument signature is empty");
	if (String.IsNullOrEmpty(objCTypeDecl)) throw new Exception("ObjC type Declaration is empty");    
	if (String.IsNullOrEmpty(objCMethodName)) throw new Exception("Method name is empty"); 
	if (String.IsNullOrEmpty(getExpression)) throw new Exception("Get expression is empty"); 

	//
	// write method
	//
#>

	// Managed method name : <#=isConstructorMethod ? ".ctor" : monoMethodName #>
	// Managed return type : <#=WriteFacetTypeInfo(facet)#>
	// Managed param types : <#=WriteFacetTypeInfo(facet.Parameters)#>
    <#=objCMethodType#> (<#=objCTypeDecl#>)<#=objCMethodName#><#=objCMethodParameters#><#=LT#>
<#+		
	if (OutputFileType == OutputType.Implementation) 
	{
		// type warnings
		GenerateTypeWarnings(facet);
		GenerateTypeWarnings(facet.Parameters);
#>
    {
<#+
		if (objCTypeDecl == "void") 
		{
#>
		<#=getExpression#>;
<#+
		} 
		else if (isConstructorMethod) 
		{
#>
		return <#=getExpression#>;
<#+
		} 
		else 
		{
			if (String.IsNullOrEmpty(managedValueToObjC)) throw new Exception("Mono value to ObjC expression is empty"); 
#>
		MonoObject *<#=ManagedVariableName#> = <#=getExpression#>;
		return <#=managedValueToObjC#>;
<#+	
		}// if objCTypeDecl
#>
    }
<#+
	} // if Implementation
}

#>
