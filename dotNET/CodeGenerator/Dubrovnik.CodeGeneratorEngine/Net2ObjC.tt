
<#@ template language="C#" debug="True" hostspecific="true"#>
<#@ output extension="log" #>
<#@ import namespace="System.Collections"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Reflection"#>
<#
//     .Net to Objective-C code generator
//
//     This template will generate Objective-C bindings  for each class
//     defined in the input assembly file.
//
//     The wrapper files will generate references to the mono Dubrovnik project to provide
//     access to embedded Mono runtime structures.
//
//      refs:
//      Generating multiple outputs
//      http://www.olegsych.com/2008/03/how-to-generate-multiple-outputs-from-single-t4-template/
//      Dealing with complexity
//      http://msdn.microsoft.com/en-us/magazine/hh975350.aspx
//

// This control block code will be integrated into the TransformText method of Net2ObjC.cs
_TransformText();

#>
<#+
//
// Class feature control blocks.
//

//
//  WriteFileHeader() 
//
void WriteFileHeader() 
{
#>
//------------------------------------------------------------------------------
// <auto-generated>
//
// <#=OutputFileType == OutputType.Implementation ? ImplementationFile : InterfaceFile #>
//
// Dubrovnik based Objective-C to Mono bindings.
//
// This code was generated from a template.
//
// Date:     <#=DateTime.Now.ToString()#>
//
// Assembly: <#=AssemblyFacet.Name#>
// Fullname: <#=AssemblyFacet.FullName#>
// Path:     <#=AssemblyFacet.Path#>
//
// Platform: <#=Environment.OSVersion.VersionString#>
// OS Arch:  <#=Environment.Is64BitOperatingSystem ? "64 bit" : "32 bit"#>
// Process:  <#=Environment.Is64BitProcess ? "64 bit" : "32 bit"#>
// Target:   <#=GetTargetFrameworkVersion()#>
// Runtime:  <#=Environment.Version.ToString()#>
<#+
	// write references info	
	foreach (CodeFacet reference in AssemblyFacet.References)
	{
#>
//
// Asm Ref:  <#=reference.Name#>
// Fullname: <#=reference.FullName#>
<#+
	}
#>
//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------
<#+
}

//
// WriteInterfaceFilePreliminaries
//
public void WriteInterfaceFilePreliminaries()
{
	string objCAssemblyHeaderName = AssemblyFacet.Name;
	string defineName = ("Include_" + ObjCNameFromMonoName(objCAssemblyHeaderName) + "_Extra").ToUpper();
	
#>
#import <Cocoa/Cocoa.h>
#import <Dubrovnik/Dubrovnik.h>

//
// Extra include
//
#ifdef <#=defineName#>
#import "<#=objCAssemblyHeaderName#>.Extra.h"	// Not generated. Add manually to project.
#endif

<#+
	if ( AssemblyFacet.References.Count() > 0) {
#>

//
// Referenced assemblies
//
<#+
    }

	foreach (CodeFacet reference in AssemblyFacet.References)
	{
		string includeFile = reference.Name;
		defineName = (includeFile + "_Included").ToUpper();
#>
#ifndef <#=defineName#>
//#import "<#=includeFile#>.h"
#endif

<#+  
	}

	bool commentOutput = false;
	foreach (NamespaceFacet @namespace in AssemblyFacet.Namespaces)
	{
		// collect facets that render as Obj-C classes
		IList<CodeFacet> facets = new List<CodeFacet>();
		facets.AddRange(@namespace.Classes);
		facets.AddRange(@namespace.Interfaces);
		facets.AddRange(@namespace.Structs);
		if (ImplementEnumerationsAsClasses) {
			facets.AddRange(@namespace.Enumerations);
        }

		// write class predeclarations 
		if (facets.Count() > 0 && !commentOutput) {
#>

//
// Forward class declarations and class aliases
//
<#+     
			commentOutput = true;   
		}

		foreach (CodeFacet facet in facets)
		{
			WriteClassPredeclaration(facet);
		}	
	}	
}

//
// WriteClassPredeclaration
//
public void WriteClassPredeclaration(CodeFacet facet)
{
	string namespacePrefix = MinimizeNamespace(facet.TypeNamespace);
	string classDefine = ObjCNameFromMonoName(namespacePrefix, facet.Name) + "_";
	string classObjCType = facet.ObjCFacet.Type;

#>
@class <#=classObjCType#>;
#ifdef <#=classDefine#>
#warning <#=classDefine#> class name collision.
#else
#define <#=@classDefine#> <#=@classObjCType#>
#endif

<#+	
}

//
// WritePragmaMark
//
public void WritePragmaMark(string info)
{
#>

#pragma mark -
#pragma mark <#=info#>
<#+	
}

//
// WriteImplementationFilePreliminaries
//
public void WriteImplementationFilePreliminaries()
{
#>

static const char * _AssemblyName = "<#=AssemblyFacet.Name#>";
<#+	
}

//
// WriteClass
//
public void WriteClass(ClassFacet @class)
{
	// prefix defines interface or implementation
	string classPrefix = OutputDelarationPrefix();
	string superClass = OutputDelarationSuffix(@class);
#>

//
// Mono class <#=@class.Name#>
//
@<#=classPrefix#> <#=@class.ObjCFacet.Type#><#=superClass#>
<#+		
	WriteFacetAsClassSetup(@class);
	WriteConstructors(@class.Constructors);
	WriteFields(@class.Fields);
	WriteProperties(@class.Properties);
	WriteMethods(@class.Methods);
#>
@end
<#+
}

//
// WriteFacetAsClassSetup
// 
public void WriteFacetAsClassSetup(CodeFacet facet)
{
	WritePragmaMark("Setup");
#>
	// obligatory override
	+ (const char *)monoClassName<#=LT#>
<#+	// output implementation body
	if (OutputFileType == OutputType.Implementation) 
	{
#>
	{
		return "<#=facet.TypeNamespace#>.<#=facet.Name#>";
	}
<#+
    }
#>
	// obligatory override
	+ (const char *)monoAssemblyName<#=LT#>
<#+	// output implementation body
	if (OutputFileType == OutputType.Implementation) 
	{
#>
	{
		return _AssemblyName;
	}
<#+
    }
}

//
// WriteStruct
//
public void WriteStruct(StructFacet @struct)
{
	// prefix defines interface or implementation
	string classPrefix = OutputDelarationPrefix();
	string superClass = OutputDelarationSuffix(@struct);
#>

//
// Mono struct <#=@struct.Name#>
//
@<#=classPrefix#> <#=@struct.ObjCFacet.Type#><#=superClass#>
<#+		
	WriteFacetAsClassSetup(@struct);
	WriteConstructors(@struct.Constructors);
	WriteFields(@struct.Fields);
	WriteProperties(@struct.Properties);
	WriteMethods(@struct.Methods);
#>
@end
<#+
}

//
// WriteInterface
//
public void WriteInterface(InterfaceFacet @interface)
{
	// prefix defines interface or implementation
	string classPrefix = OutputDelarationPrefix();
	string superClass = OutputDelarationSuffix(@interface);
#>

//
// Mono interface <#=@interface.Name#>
//
@<#=classPrefix#> <#=@interface.ObjCFacet.Type#> : DBMonoObjectRepresentation
<#+		
	WriteFacetAsClassSetup(@interface);	
	WriteProperties(@interface.Properties);
	WriteMethods(@interface.Methods);
#>
@end
<#+
}

//
// WriteEnumeration
//
public void WriteEnumeration(EnumerationFacet enumeration)
{
	string objCEnumType = ObjCTypeNameFromMonoTypeName(enumeration.UnderlyingType);
	string objCType = ObjCTypeNameFromMonoTypeName(enumeration.Type);

	// output the enums as a typedef.
	// note that we could also generate a class based definition.
	// it remains to be seen whether this is necessary.
	if (OutputFileType == OutputType.Interface) 
	{
		if (!ImplementEnumerationsAsClasses) {
#>

//
// Mono enumeration <#=enumeration.Type#>
//
typedef NS_ENUM(<#=objCEnumType#>, <#=objCType#>) {
<#+
			foreach (FieldFacet field in enumeration.Fields) {
				string objCFieldName = ObjCNameFromMonoName(field.Name);
#>
	<#=objCType#>_<#=objCFieldName#> = <#=field.ConstantValue#>,
<#+
			}
#>
};
<#+
		}	else {
			throw new Exception("Enumerations as classes not implemented");
		}
    } 

}

//
// WriteFacetAsAccessor
//
public void WriteFacetAsAccessor(CodeFacet facet)
{
	string accessorName = facet.Name;
	string getterName = accessorName.FirstCharacterToLower();
	string setterName = "set" + accessorName.FirstCharacterToUpper();
	string accessorType = facet.Type;
	string objCTypeDecl = ObjCTypeDeclFromMonoFacet(facet);

	// create Obj-C representation of mono object
	string monoValueToObjC = MonoValueToObjc(MonoVariableName, facet);
	string objCValueToMono = ObjCValueToMono(ObjCVariableName, objCTypeDecl, facet);
	ObjCTypeAssociation objCTypeAssociate = ObjCTypeAssociate(facet.Type);

	string objCMethodType = !facet.IsStatic ? "-" : "+";
	string getFormat, setFormat;
	if (facet is PropertyFacet) {
		if (!facet.IsStatic) {
			getFormat = "[self getMonoProperty:\"{0}\"]";
			setFormat = "[self setMonoProperty:\"{0}\" valueObject:{1}]";
		} else {
			getFormat = "[[self class] getMonoClassProperty:\"{0}\"]";
			setFormat = "[[self class] setMonoClassProperty:\"{0}\" valueObject:{1}]";
        }
	} else if (facet is FieldFacet) {
		// note different field getter signature.
		// valueObject is a pointer to storage for both value and reference types.
		if (!facet.IsStatic) {
			getFormat = "[self getMonoField:\"{0}\" valuePtr:DB_PTR({1})]";
			setFormat = "[self setMonoField:\"{0}\" valueObject:{1}]";
		} else {
			getFormat = "[[self class] getMonoClassField:\"{0}\" valuePtr:DB_PTR({1})]";
			setFormat = "[[self class] setMonoClassField:\"{0}\" valueObject:{1}]";
        }
    } else {
		throw new Exception("Cannot write facet as accessor");
    }

	string getExpression = String.Format(getFormat, accessorName, MonoVariableName);
	string setExpression = String.Format(setFormat, accessorName, MonoVariableName);

	//
	// write getter
	//
	if (facet.IsReadable) {
#>

	// Mono type is <#=accessorType#>
    <#=objCMethodType#> (<#=objCTypeDecl#>)<#=getterName#><#=LT#>
<#+		
		if (OutputFileType == OutputType.Implementation) 
		{
#>
    {
<#+
			if (facet is PropertyFacet) {
#>
		MonoObject *<#=MonoVariableName#> = <#=getExpression#>;
		return <#=monoValueToObjC#>;
	}
<#+	
            } else if (facet is FieldFacet) {

				string returnExpression;
				string valueTypeDecl = objCTypeDecl;
				if (objCTypeAssociate == null || objCTypeAssociate.IsNSObject) {
					returnExpression = monoValueToObjC;
					valueTypeDecl = "MonoObject *";
				} else {
					returnExpression = MonoVariableName;
                }
 #>
		<#=valueTypeDecl#> <#=MonoVariableName#>;
		<#=getExpression#>;
		return <#=returnExpression#>;
	}
<#+			}
		} // if Implementation
    } // if IsReadable

	//
	// write setter
	//
	if (facet.IsWritable) {

#>
    <#=objCMethodType#> (void)<#=setterName#>:(<#=objCTypeDecl#>)value<#=LT#>
<#+
		if (OutputFileType == OutputType.Implementation) 
		{
#>
	{
		MonoObject *<#=MonoVariableName#> = <#=objCValueToMono#>;
		<#=setExpression#>;          
	}
<#+
        }  // if Implementation
    } // if IsWritable
}

//
// WriteFacetAsMethod
//
public void WriteFacetAsMethod(MethodFacet facet)
{
	string monoMethodName = facet.Name;
	string objCMethodFormat = null;
	string objCMethodName = null;
	bool isConstructorMethod = (facet.Name == null);	// constructor has no method name
	string objCMethodType = facet.IsStatic || isConstructorMethod ? "+" : "-";
	string objCTypeDecl = ObjCTypeDeclFromMonoFacet(facet);	
	string monoValueToObjC = null;

	// instance method requires a name and type
	if (!isConstructorMethod) {

		objCMethodName = monoMethodName.FirstCharacterToLower();

		// create Obj-C representation of mono object
		monoValueToObjC = MonoValueToObjc(MonoVariableName, facet);

		if (!facet.IsStatic) {
			objCMethodFormat = "[self invokeMonoMethod:\"{0}({1})\" withNumArgs:{2}]";
		} else {
			objCMethodFormat = "[[self class] invokeMonoClassMethod:\"{0}({1})\" withNumArgs:{1}]";
		}
	} else {

		// this looks like a default constructor
		if (facet.Parameters.Count() == 0) {
			return;
        }

		objCMethodName = "new";

		// a constructor requires no explicit name or type
		objCMethodFormat = "[[self alloc] initWithSignature:\"{1}\" withNumArgs:{2}]";
    }

	// build the argument lists
	StringBuilder monoSigBuilder = new StringBuilder();
	StringBuilder methodArgsBuilder = new StringBuilder();
	StringBuilder invokeArgsBuilder = new StringBuilder();
	int idx = 0;
	foreach (ParameterFacet parameter in facet.Parameters) {

		//
		// build the ObjC method argument representation
		//  eg: name1:(int32_t)p1 name2:(int64_t)p2 name3:(NSString *)p3
		//
		string methodArgSig = null;
		string methodArgType = null;
		bool parameterIsObject = true;

		ObjCTypeAssociation objCTypeAssociate = ObjCTypeAssociate(parameter.Type);
		MonoTypeAssociation monoTypeAssociate = null;
		if (objCTypeAssociate != null) {
			monoTypeAssociate = objCTypeAssociate.MonoTypeAssociate;
			methodArgType =  objCTypeAssociate.ObjCTypeDecl;
			parameterIsObject = objCTypeAssociate.IsNSObject;
		} else {
			methodArgType = ObjCTypeDeclFromMonoFacet(parameter);
        }
		
		// use parameter name as signature ?
		bool usePrameterNameAsSignature = true;
 		if (usePrameterNameAsSignature) {
			methodArgSig = ObjCNameFromMonoName(parameter.Name);
        }

		if (idx == 0) {
			if (AppendFirstArgSignatureToMethodName) {
				objCMethodName += "With";
				methodArgsBuilder.AppendFormat("{0}", methodArgSig.FirstCharacterToUpper());
            } 
        } else {
			methodArgsBuilder.AppendFormat(" {0}", methodArgSig.FirstCharacterToLower());
        }
		methodArgsBuilder.AppendFormat(":({0})p{1}", methodArgType, idx + 1);

		//
		// build the mono invocation argument representation
		// eg: DB_VALUE(p1), DB_VALUE(p2), [p3 monoValue]
		//
		string argFormat = null;
		if (idx > 0) invokeArgsBuilder.Append(", ");
		if (parameterIsObject) {
			argFormat = "[p{0} monoValue]";
        } else {
			argFormat = "DB_VALUE(p{0})";
		}
		invokeArgsBuilder.AppendFormat(argFormat, idx + 1);

		//
		// build the mono method argument signature
		// eg: int, long, string
		//
		if (idx > 0) monoSigBuilder.Append(",");
		string monoParameterType = null;
		if (monoTypeAssociate != null) monoParameterType = monoTypeAssociate.MonoTypeInvoke;
		if (monoParameterType == null) monoParameterType = parameter.Type;
		monoSigBuilder.Append(monoParameterType);

		idx++;
    }

	// finalize arugment list representations
	string monoMethodSig = monoSigBuilder.ToString();
	string methodArgs = methodArgsBuilder.ToString();
	string invokeArgs = facet.Parameters.Count().ToString();
	if (facet.Parameters.Count() > 0) {
		invokeArgs += ", " + invokeArgsBuilder.ToString();
    }

	string getExpression = String.Format(objCMethodFormat, monoMethodName, monoMethodSig, invokeArgs);

	// validation
	if (isConstructorMethod && String.IsNullOrEmpty(monoMethodSig)) throw new Exception("Mono method argument signature is empty");
	if (String.IsNullOrEmpty(objCTypeDecl)) throw new Exception("ObjC type delaration is empty");    
	if (String.IsNullOrEmpty(objCMethodName)) throw new Exception("Method name is empty"); 
	if (String.IsNullOrEmpty(getExpression)) throw new Exception("Get expression is empty"); 

	//
	// write method
	//
#>

	// Mono type is <#=facet.Type#>
    <#=objCMethodType#> (<#=objCTypeDecl#>)<#=objCMethodName#><#=methodArgs#><#=LT#>
<#+		
	if (OutputFileType == OutputType.Implementation) 
	{
#>
    {
<#+
		if (objCTypeDecl == "void") {
#>
		<#=getExpression#>;
<#+
		} else if (isConstructorMethod) {
#>
		return <#=getExpression#>;
<#+
		} else {
			if (String.IsNullOrEmpty(monoValueToObjC)) throw new Exception("Mono value to ObjC expression is empty"); 
#>
		MonoObject *<#=MonoVariableName#> = <#=getExpression#>;
		return <#=monoValueToObjC#>;
<#+	
		}// if objCTypeDecl
#>
    }
<#+
	} // if Implementation
}

#>
