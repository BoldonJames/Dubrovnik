//------------------------------------------------------------------------------
// <auto-generated>
//
// Dubrovnik.UnitTests.h
//
// Dubrovnik based Objective-C to Mono bindings.
//
// This code was generated using a tool available as part of:
// https://github.com/ThesaurusSoftware/Dubrovnik
// This code has dependencies on the above project.
//
// Date:     8/21/2013 10:02:29 PM
//
// Assembly: Dubrovnik.UnitTests
// Fullname: Dubrovnik.UnitTests, Version=1.0.4980.38600, Culture=neutral, PublicKeyToken=null
// Path:     Z:\Documents\Thesaurus\Development\xcode\Dubrovnik\dotNET\UnitTests\Dubrovnik.UnitTests\bin\Debug\Dubrovnik.UnitTests.exe
//
// Platform: Microsoft Windows NT 6.1.7601 Service Pack 1
// OS Arch:  64 bit
// Process:  32 bit
// Target:   mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// Runtime:  4.0.30319.18052
//
// Asm Ref:  mscorlib
// Fullname: mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------
#import <Cocoa/Cocoa.h>
#import <Dubrovnik/Dubrovnik.h>

//
// Extra include
//
#ifdef INCLUDE_DUBROVNIK_UNITTESTS_EXTRA
#import "Dubrovnik.UnitTests.__Extra__.h"	// Not auto generated. Add manually to project.
#endif


//
// Referenced assemblies
//
#ifndef MSCORLIB_INCLUDED
//#import "mscorlib.h"
#endif


//
// Forward class declarations and class aliases
//
@class Dubrovnik_UnitTests_ReferenceObject;
#ifdef DUReferenceObject_
#warning DUReferenceObject_ class name collision.
#else
#define DUReferenceObject_ Dubrovnik_UnitTests_ReferenceObject
#endif

@class Dubrovnik_UnitTests_TestObject;
#ifdef DUTestObject_
#warning DUTestObject_ class name collision.
#else
#define DUTestObject_ Dubrovnik_UnitTests_TestObject
#endif

@class Dubrovnik_UnitTests_ReferenceStruct;
#ifdef DUReferenceStruct_
#warning DUReferenceStruct_ class name collision.
#else
#define DUReferenceStruct_ Dubrovnik_UnitTests_ReferenceStruct
#endif

@class Dubrovnik_UnitTests_Extensions_ReferenceObjectExtensions;
#ifdef DUEReferenceObjectExtensions_
#warning DUEReferenceObjectExtensions_ class name collision.
#else
#define DUEReferenceObjectExtensions_ Dubrovnik_UnitTests_Extensions_ReferenceObjectExtensions
#endif


//
// Managed enumeration : Dubrovnik.UnitTests.IntEnum
//
typedef NS_ENUM(int32_t, Dubrovnik_UnitTests_IntEnum) {
	Dubrovnik_UnitTests_IntEnum_val1 = 1,
	Dubrovnik_UnitTests_IntEnum_val2 = 2,
	Dubrovnik_UnitTests_IntEnum_val3 = 3,
	Dubrovnik_UnitTests_IntEnum_val4 = 4,
};

//
// Managed enumeration : Dubrovnik.UnitTests.LongEnum
//
typedef NS_ENUM(int64_t, Dubrovnik_UnitTests_LongEnum) {
	Dubrovnik_UnitTests_LongEnum_val1 = 1,
	Dubrovnik_UnitTests_LongEnum_val2 = 2,
	Dubrovnik_UnitTests_LongEnum_val3 = 3,
	Dubrovnik_UnitTests_LongEnum_val4 = 4,
};

//
// Managed struct : ReferenceStruct
//
@interface Dubrovnik_UnitTests_ReferenceStruct : DBMonoObjectRepresentation

#pragma mark -
#pragma mark Setup
	// obligatory override
	+ (const char *)monoClassName;
	// obligatory override
	+ (const char *)monoAssemblyName;

#pragma mark -
#pragma mark Constructors

	// Managed method name : Dubrovnik.UnitTests.ReferenceStruct
	// Managed return type : Dubrovnik.UnitTests.ReferenceStruct
	// Managed param types : System.String
    + (Dubrovnik_UnitTests_ReferenceStruct *)new_withSString:(NSString *)p1;

#pragma mark -
#pragma mark Fields

	// Managed type : System.Int32
    - (int32_t)intField;
    - (void)setIntField:(int32_t)value;

	// Managed type : System.String
    - (NSString *)stringField;
    - (void)setStringField:(NSString *)value;

#pragma mark -
#pragma mark Properties

	// Managed type : System.String
    - (NSString *)stringProperty;
    - (void)setStringProperty:(NSString *)value;

#pragma mark -
#pragma mark Methods

	// Managed method name : StringMethod
	// Managed return type : System.String
	// Managed param types : System.String
    - (NSString *)stringMethod_withS1String:(NSString *)p1;
@end

//
// Managed class : ReferenceObject
//
@interface Dubrovnik_UnitTests_ReferenceObject : DBMonoObjectRepresentation

#pragma mark -
#pragma mark Setup
	// obligatory override
	+ (const char *)monoClassName;
	// obligatory override
	+ (const char *)monoAssemblyName;

#pragma mark -
#pragma mark Constructors

	// Managed method name : Dubrovnik.UnitTests.ReferenceObject
	// Managed return type : Dubrovnik.UnitTests.ReferenceObject
	// Managed param types : System.String
    + (Dubrovnik_UnitTests_ReferenceObject *)new_withValueString:(NSString *)p1;

	// Managed method name : Dubrovnik.UnitTests.ReferenceObject
	// Managed return type : Dubrovnik.UnitTests.ReferenceObject
	// Managed param types : System.String, System.String
    + (Dubrovnik_UnitTests_ReferenceObject *)new_withValue1String:(NSString *)p1 value2String:(NSString *)p2;

#pragma mark -
#pragma mark Fields

	// Managed type : System.String
    + (NSString *)classConstStringField;

	// Managed type : System.Int32
    + (int32_t)classIntField;
    + (void)setClassIntField:(int32_t)value;

	// Managed type : System.String
    - (NSString *)classReadonlyStringField;

	// Managed type : System.String
    + (NSString *)classStringField;
    + (void)setClassStringField:(NSString *)value;

	// Managed type : System.DateTime
    - (NSDate *)dateField;
    - (void)setDateField:(NSDate *)value;

	// Managed type : Dubrovnik.UnitTests.IntEnum
    - (Dubrovnik_UnitTests_IntEnum)intEnumField;
    - (void)setIntEnumField:(Dubrovnik_UnitTests_IntEnum)value;

	// Managed type : System.Int32
    - (int32_t)intField;
    - (void)setIntField:(int32_t)value;

	// Managed type : Dubrovnik.UnitTests.LongEnum
    - (Dubrovnik_UnitTests_LongEnum)longEnumField;
    - (void)setLongEnumField:(Dubrovnik_UnitTests_LongEnum)value;

	// Managed type : System.String
    - (NSString *)stringField;
    - (void)setStringField:(NSString *)value;

#pragma mark -
#pragma mark Properties

	// Managed type : System.String
    + (NSString *)classProperty;
    + (void)setClassProperty:(NSString *)value;

	// Managed type : System.DateTime
    - (NSDate *)date;
    - (void)setDate:(NSDate *)value;

	// Managed type : System.Decimal
    - (NSDecimalNumber *)decimalNumber;
    - (void)setDecimalNumber:(NSDecimalNumber *)value;

	// Managed type : System.Int32
    - (int32_t)int32Number;
    - (void)setInt32Number:(int32_t)value;

	// Managed type : System.Int64
    - (int64_t)int64Number;
    - (void)setInt64Number:(int64_t)value;

	// Managed type : Dubrovnik.UnitTests.IntEnum
    - (Dubrovnik_UnitTests_IntEnum)intEnumeration;
    - (void)setIntEnumeration:(Dubrovnik_UnitTests_IntEnum)value;

	// Managed type : System.Int32
    - (int32_t)intNumber;
    - (void)setIntNumber:(int32_t)value;

	// Managed type : Dubrovnik.UnitTests.LongEnum
    - (Dubrovnik_UnitTests_LongEnum)longEnumeration;
    - (void)setLongEnumeration:(Dubrovnik_UnitTests_LongEnum)value;

	// Managed type : System.String
    - (NSString *)name;
    - (void)setName:(NSString *)value;

	// Managed type : Dubrovnik.UnitTests.ReferenceObject
    - (Dubrovnik_UnitTests_ReferenceObject *)referenceObjectRelative;
    - (void)setReferenceObjectRelative:(Dubrovnik_UnitTests_ReferenceObject *)value;

	// Managed type : System.String
    - (NSString *)stringProperty;
    - (void)setStringProperty:(NSString *)value;

#pragma mark -
#pragma mark Methods

	// Managed method name : ClassDescription
	// Managed return type : System.String
	// Managed param types : 
    - (NSString *)classDescription;

	// Managed method name : DateMethod
	// Managed return type : System.DateTime
	// Managed param types : System.DateTime
    - (NSDate *)dateMethod_withD1SDateTime:(NSDate *)p1;

	// Managed method name : DoubleIt
	// Managed return type : System.Int32
	// Managed param types : System.Int32
    - (int32_t)doubleIt_withXInt:(int32_t)p1;

	// Managed method name : DoubleIt
	// Managed return type : System.Int32
	// Managed param types : ref System.Int32&
    - (int32_t)doubleIt_withXIntRef:(int32_t*)p1;

	// Managed method name : MixedMethod1
	// Managed return type : System.String
	// Managed param types : System.Int32, System.Int64, System.Single, System.Double, System.DateTime, System.String, Dubrovnik.UnitTests.ReferenceObject
    - (NSString *)mixedMethod1_withIntargInt:(int32_t)p1 longArgLong:(int64_t)p2 floatArgSingle:(float)p3 doubleArgDouble:(double)p4 dateArgSDateTime:(NSDate *)p5 stringArgString:(NSString *)p6 refObjectArgDUReferenceObject:(Dubrovnik_UnitTests_ReferenceObject *)p7;

	// Managed method name : ReferenceStructMethod
	// Managed return type : Dubrovnik.UnitTests.ReferenceStruct
	// Managed param types : System.String
    - (Dubrovnik_UnitTests_ReferenceStruct *)referenceStructMethod_withS1String:(NSString *)p1;

	// Managed method name : StringMethod
	// Managed return type : System.String
	// Managed param types : 
    - (NSString *)stringMethod;

	// Managed method name : StringMethod
	// Managed return type : System.String
	// Managed param types : System.String
    - (NSString *)stringMethod_withS1String:(NSString *)p1;

	// Managed method name : StringMethod
	// Managed return type : System.String
	// Managed param types : System.String, System.String
    - (NSString *)stringMethod_withS1String:(NSString *)p1 s2String:(NSString *)p2;

	// Managed method name : StringMethod
	// Managed return type : System.String
	// Managed param types : ref System.String&
    - (NSString *)stringMethod_withS1StringRef:(NSString **)p1;

	// Managed method name : StringMethod
	// Managed return type : System.String
	// Managed param types : ref System.String&, System.String
    - (NSString *)stringMethod_withS1StringRef:(NSString **)p1 s2String:(NSString *)p2;

	// Managed method name : StringMethod
	// Managed return type : System.String
	// Managed param types : System.String, ref System.String&
    - (NSString *)stringMethod_withS1String:(NSString *)p1 s2StringRef:(NSString **)p2;

	// Managed method name : StringMethod
	// Managed return type : System.String
	// Managed param types : ref System.String&, ref System.String&
    - (NSString *)stringMethod_withS1StringRef:(NSString **)p1 s2StringRef:(NSString **)p2;
@end

//
// Managed class : TestObject
//
@interface Dubrovnik_UnitTests_TestObject : DBMonoObjectRepresentation

#pragma mark -
#pragma mark Setup
	// obligatory override
	+ (const char *)monoClassName;
	// obligatory override
	+ (const char *)monoAssemblyName;

#pragma mark -
#pragma mark Properties

	// Managed type : System.String
    - (NSString *)name;
    - (void)setName:(NSString *)value;
@end

//
// Managed class : ReferenceObjectExtensions
//
@interface Dubrovnik_UnitTests_Extensions_ReferenceObjectExtensions : DBMonoObjectRepresentation

#pragma mark -
#pragma mark Setup
	// obligatory override
	+ (const char *)monoClassName;
	// obligatory override
	+ (const char *)monoAssemblyName;

#pragma mark -
#pragma mark Methods

	// Managed method name : ExtensionString
	// Managed return type : System.String
	// Managed param types : Dubrovnik.UnitTests.ReferenceObject
    - (NSString *)extensionString_withTestDUReferenceObject:(Dubrovnik_UnitTests_ReferenceObject *)p1;

	// Managed method name : StaticString
	// Managed return type : System.String
	// Managed param types : 
    - (NSString *)staticString;

	// Managed method name : StaticString
	// Managed return type : System.String
	// Managed param types : Dubrovnik.UnitTests.ReferenceObject
    - (NSString *)staticString_withTestDUReferenceObject:(Dubrovnik_UnitTests_ReferenceObject *)p1;
@end
