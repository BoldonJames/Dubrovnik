// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Dubrovnik.Tools
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Text;
    using System.Linq;
    using System.Reflection;
    using Dubrovnik.Tools;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class Net2ObjC : Net2ObjCBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            
            #line 11 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

//     .Net to Objective-C code generator
//
//     This template will generate Objective-C bindings  for each class
//     defined in the input assembly file.
//
//     The wrapper files will generate references to the mono Dubrovnik project to provide
//     access to embedded Mono runtime structures.
//
//      refs:
//      Generating multiple outputs
//      http://www.olegsych.com/2008/03/how-to-generate-multiple-outputs-from-single-t4-template/
//      Dealing with complexity
//      http://msdn.microsoft.com/en-us/magazine/hh975350.aspx
//

// This control block code will be integrated into the TransformText method of Net2ObjC.cs
_TransformText();


            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 31 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

//
// Class feature control blocks.
//

//
//  WriteFileBanner() 
//
void WriteFileBanner() 
{

        
        #line default
        #line hidden
        
        #line 41 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("//------------------------------------------------------------------------------\r" +
        "\n// <auto-generated tool=\"");

        
        #line default
        #line hidden
        
        #line 43 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(GenToolName));

        
        #line default
        #line hidden
        
        #line 43 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\">\r\n//\r\n// ");

        
        #line default
        #line hidden
        
        #line 45 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(OutputFileType == OutputType.Implementation ? ImplementationFile : InterfaceFile));

        
        #line default
        #line hidden
        
        #line 45 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n//\r\n// Dubrovnik based OS X Cocoa Objective-C to Mono bindings.\r\n//\r\n// This co" +
        "de was generated using a tool available as part of:\r\n// http://github.com/Thesau" +
        "rusSoftware/Dubrovnik\r\n// This code has dependencies on the above project.\r\n//\r\n" +
        "// Date:     ");

        
        #line default
        #line hidden
        
        #line 53 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(TimeStamp));

        
        #line default
        #line hidden
        
        #line 53 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n//\r\n// Assembly: ");

        
        #line default
        #line hidden
        
        #line 55 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyFacet.Name));

        
        #line default
        #line hidden
        
        #line 55 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n// Fullname: ");

        
        #line default
        #line hidden
        
        #line 56 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyFacet.FullName));

        
        #line default
        #line hidden
        
        #line 56 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n// Path:     ");

        
        #line default
        #line hidden
        
        #line 57 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyFacet.Path));

        
        #line default
        #line hidden
        
        #line 57 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n//\r\n// Platform: ");

        
        #line default
        #line hidden
        
        #line 59 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(Environment.OSVersion.VersionString));

        
        #line default
        #line hidden
        
        #line 59 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n// OS Arch:  ");

        
        #line default
        #line hidden
        
        #line 60 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(Environment.Is64BitOperatingSystem ? "64 bit" : "32 bit"));

        
        #line default
        #line hidden
        
        #line 60 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n// Process:  ");

        
        #line default
        #line hidden
        
        #line 61 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(Environment.Is64BitProcess ? "64 bit" : "32 bit"));

        
        #line default
        #line hidden
        
        #line 61 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n// Target:   ");

        
        #line default
        #line hidden
        
        #line 62 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(GetTargetFrameworkVersion()));

        
        #line default
        #line hidden
        
        #line 62 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n// Runtime:  ");

        
        #line default
        #line hidden
        
        #line 63 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(Environment.Version.ToString()));

        
        #line default
        #line hidden
        
        #line 63 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 64 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

	// write references info	
	foreach (CodeFacet reference in AssemblyFacet.References)
	{

        
        #line default
        #line hidden
        
        #line 68 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("//\r\n// Asm Ref:  ");

        
        #line default
        #line hidden
        
        #line 70 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(reference.Name));

        
        #line default
        #line hidden
        
        #line 70 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n// Fullname: ");

        
        #line default
        #line hidden
        
        #line 71 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(reference.FullName));

        
        #line default
        #line hidden
        
        #line 71 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 72 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

	}

        
        #line default
        #line hidden
        
        #line 74 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(@"//
// Manual changes to this file may cause unexpected behavior in your application.
// Manual changes to this file will be overwritten if the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------
");

        
        #line default
        #line hidden
        
        #line 81 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

}

//
// WriteModuleBanner
//
public void WriteModuleBanner(CodeFacet facet, string module)
{
	string outputFile = facet.OutputFileName() + OutputFileSuffix();

	// There is an argument that says - Lets add the date here!
	// However this leads to what I think are excessively noisey commits.

        
        #line default
        #line hidden
        
        #line 93 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n//++");

        
        #line default
        #line hidden
        
        #line 95 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(GenToolName));

        
        #line default
        #line hidden
        
        #line 95 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 95 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(outputFile));

        
        #line default
        #line hidden
        
        #line 95 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n//\r\n// Managed ");

        
        #line default
        #line hidden
        
        #line 97 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(module));

        
        #line default
        #line hidden
        
        #line 97 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" : ");

        
        #line default
        #line hidden
        
        #line 97 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(facet.Name));

        
        #line default
        #line hidden
        
        #line 97 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n//\r\n");

        
        #line default
        #line hidden
        
        #line 99 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
	
	if (OutputFileType == OutputType.Implementation)
    {
		WriteModuleFeatureRequirements();
    }
}

//
// WriteModuleFooter
//
public void WriteModuleFooter()
{

        
        #line default
        #line hidden
        
        #line 111 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("//--");

        
        #line default
        #line hidden
        
        #line 112 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(GenToolName));

        
        #line default
        #line hidden
        
        #line 112 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 113 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
	
}
//
// WriteInterfaceFilePreliminaries
//
public void WriteInterfaceFilePreliminaries()
{
	string objCAssemblyHeaderName = ObjCIdentifierFromManagedIdentifier(AssemblyFacet.Name);
	string objCAssemblyExtraHeader = objCAssemblyHeaderName + ".__Extra__.h";
	

        
        #line default
        #line hidden
        
        #line 123 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("#import <Cocoa/Cocoa.h>\r\n#import <Dubrovnik/Dubrovnik.h>\r\n\r\n//\r\n// Extra include\r" +
        "\n//\r\n#if __has_include(\"");

        
        #line default
        #line hidden
        
        #line 130 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCAssemblyExtraHeader));

        
        #line default
        #line hidden
        
        #line 130 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\")\r\n#import \"");

        
        #line default
        #line hidden
        
        #line 131 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCAssemblyExtraHeader));

        
        #line default
        #line hidden
        
        #line 131 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\"\t// Not auto generated. Add manually to project.\r\n#endif\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 134 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

	if ( AssemblyFacet.References.Count() > 0) 
	{

        
        #line default
        #line hidden
        
        #line 137 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n//\r\n// Referenced assemblies\r\n//\r\n");

        
        #line default
        #line hidden
        
        #line 142 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

    }

	foreach (CodeFacet reference in AssemblyFacet.References)
	{
		string includeFile = reference.Name;
		string defineName = (ObjCIdentifierFromManagedIdentifier(includeFile) + "_Included").ToUpper();

        
        #line default
        #line hidden
        
        #line 149 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("#ifndef ");

        
        #line default
        #line hidden
        
        #line 150 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(defineName));

        
        #line default
        #line hidden
        
        #line 150 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n//#import \"");

        
        #line default
        #line hidden
        
        #line 151 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(includeFile));

        
        #line default
        #line hidden
        
        #line 151 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(".h\"\r\n#endif\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 154 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
  
	}

	bool commentOutput = false;
	foreach (NamespaceFacet @namespace in AssemblyFacet.Namespaces)
	{
		// collect facets that render as Obj-C classes
		IList<CodeFacet> facets = new List<CodeFacet>();
		facets.AddRange(@namespace.Classes);
		facets.AddRange(@namespace.Interfaces);
		facets.AddRange(@namespace.Structs);
		facets.AddRange(@namespace.Enumerations);

		// write class predeclarations 
		if (facets.Count() > 0 && !commentOutput) 
		{

        
        #line default
        #line hidden
        
        #line 170 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n//\r\n// Forward class declarations and class aliases\r\n//\r\n");

        
        #line default
        #line hidden
        
        #line 175 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
     
			commentOutput = true;   
		}

		foreach (CodeFacet facet in facets)
		{
			WriteClassPredeclaration(facet);
		}	
	}	
}

static List<string> _classDefines = new List<string>();
//
// WriteClassPredeclaration
//
public void WriteClassPredeclaration(CodeFacet facet)
{
	string namespacePrefix = ObjCAcronymFromManagedIdentifier(facet.TypeNamespace);
	string classDefine = ObjCIdentifierFromManagedIdentifier(namespacePrefix + facet.Name) + "_";
	string classObjCType = facet.ObjCFacet.Type;

        
        #line default
        #line hidden
        
        #line 195 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("@class ");

        
        #line default
        #line hidden
        
        #line 196 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(classObjCType));

        
        #line default
        #line hidden
        
        #line 196 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 197 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"


   // collision warning facility can be useful but it's loud when it kicks in!
	bool warnAboutCollisions = false;
	if (warnAboutCollisions) {

        
        #line default
        #line hidden
        
        #line 202 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("#ifdef ");

        
        #line default
        #line hidden
        
        #line 203 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(classDefine));

        
        #line default
        #line hidden
        
        #line 203 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n#warning ");

        
        #line default
        #line hidden
        
        #line 204 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(classDefine));

        
        #line default
        #line hidden
        
        #line 204 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" class name collision.\r\n#else\r\n#define ");

        
        #line default
        #line hidden
        
        #line 206 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(@classDefine));

        
        #line default
        #line hidden
        
        #line 206 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 206 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(@classObjCType));

        
        #line default
        #line hidden
        
        #line 206 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n#endif\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 209 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
	
	} else {

		// issue the define if unique in this scope.
		if (!_classDefines.Contains(classDefine)) {
			_classDefines.Add(classDefine);

        
        #line default
        #line hidden
        
        #line 215 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("#define ");

        
        #line default
        #line hidden
        
        #line 216 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(@classDefine));

        
        #line default
        #line hidden
        
        #line 216 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 216 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(@classObjCType));

        
        #line default
        #line hidden
        
        #line 216 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 218 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

		}
		else {

        
        #line default
        #line hidden
        
        #line 221 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("//#define ");

        
        #line default
        #line hidden
        
        #line 222 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(@classDefine));

        
        #line default
        #line hidden
        
        #line 222 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 222 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(@classObjCType));

        
        #line default
        #line hidden
        
        #line 222 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" // WARNING: duplicate detected in file scope\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 224 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

		}	
	}
}

//
// WritePragmaMark
//
public void WritePragmaMark(string info)
{

        
        #line default
        #line hidden
        
        #line 234 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n#pragma mark -\r\n#pragma mark ");

        
        #line default
        #line hidden
        
        #line 237 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(info));

        
        #line default
        #line hidden
        
        #line 237 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 238 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
	
}

//
// WriteCommentBlock
//
public void WriteCommentBlock(string info)
{

        
        #line default
        #line hidden
        
        #line 246 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n/*\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 250 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(info));

        
        #line default
        #line hidden
        
        #line 250 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n\r\n*/\r\n");

        
        #line default
        #line hidden
        
        #line 253 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
	
}
//
// WriteImplementationFilePreliminaries
//
public void WriteImplementationFilePreliminaries()
{
	WriteModuleFeatureRequirements();
}

//
// WriteModuleFeatureRequirements
//
public void WriteModuleFeatureRequirements()
{

        
        #line default
        #line hidden
        
        #line 268 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n// ARC is required\r\n#if  ! __has_feature(objc_arc)\r\n#error This file requires A" +
        "RC. \r\n#endif\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 275 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

}

//
// WriteProtocolStart
//
public void WriteProtocolStart(InterfaceFacet facet, string module, bool writeImplementation = false)
{
	if (!writeImplementation) {
		WriteModuleBanner(facet, module);
    }

	string baseProtocol = "System_Object";
	string adoptionProtocolSuffix = "_";
	string adoptionProtocolName = facet.ObjCFacet.Type + adoptionProtocolSuffix;

	if (!writeImplementation) {

		// write adoption protocol
		string protocolSuffix = adoptionProtocolSuffix;
		string protocolName = adoptionProtocolName;
	
		// build list of base protocols 
		string baseProtocols = baseProtocol + protocolSuffix;
		foreach (ImplementedInterfaceFacet interfaceFacet in facet.ImplementedInterfaces) {
			baseProtocols += ", ";
			baseProtocols += (interfaceFacet.ObjCFacet.Type + protocolSuffix);
		}


        
        #line default
        #line hidden
        
        #line 304 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n/*\r\n A managed interface is represented as follows:\r\n\r\n 1. An adoption protocol" +
        " that advertises that a class has adopted a given protocol. For the reasons \r\n g" +
        "iven in the notes below this protocol by default declares no members. The code g" +
        "enerator will\r\n use this protocol when declaring classes and method parameters.\r" +
        "\n\r\n 2. An implementation protocol that declares the properties and methods defin" +
        "ed by the interface.\r\n The code generator will use this protocol when declaring " +
        "variables.\r\n\r\n 3. An interface header and implementation body. The explicit clas" +
        "s implementation of the managed interface\r\n can be used to create an instance th" +
        "at conforms to the given interface in order to access explicit properties.\r\n\r\n T" +
        "he above seems to give the best approach for interacting with complex managed in" +
        "terfaces.\r\n\r\n Notes:\r\n\r\n .Net support for explicit interfaces means that a class" +
        " can inherit two or more different\r\n signatures for the same property or method " +
        "from two or more interfaces. \r\n This is not supported by Objective-C. \r\n\r\n A sec" +
        "ond point is that properties declared in protocols don\'t get their ivars synthes" +
        "ized.\r\n This causes warnings to be issued when interface properties are exposed " +
        "explicitly.\r\n\r\n A third point is that even when we receive a managed interface a" +
        "s a return value from a property \r\n or method we still need to provide a full bi" +
        "nding in order access those properties and methods.\r\n\r\n A class can test for pro" +
        "tocol adoption using Class -conformsToProtocol: using the adoption protocol.\r\n B" +
        "y casting to the implementation protocol an instance can check for method implem" +
        "entation using respondsToSelector:.\r\n\r\n Properties and method predeclarations ca" +
        "n be conditionally included in the adoption protocol if required.\r\n\r\n*/\r\n\r\n\r\n//\r" +
        "\n// Adoption protocol\r\n//\r\n@protocol ");

        
        #line default
        #line hidden
        
        #line 344 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(protocolName));

        
        #line default
        #line hidden
        
        #line 344 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" <");

        
        #line default
        #line hidden
        
        #line 344 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(baseProtocols));

        
        #line default
        #line hidden
        
        #line 344 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(">\r\n\r\n@optional\r\n\r\n#ifdef  DEF_P_AND_M_");

        
        #line default
        #line hidden
        
        #line 348 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(protocolName.ToUpper()));

        
        #line default
        #line hidden
        
        #line 348 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 349 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
	
    } else {
	
		// write implementation protocol
		string protocolSuffix = "";
		string protocolName = facet.ObjCFacet.Type + protocolSuffix;

		// build list of base protocols 
		string baseProtocols = adoptionProtocolName + ", " + baseProtocol;
		foreach (ImplementedInterfaceFacet interfaceFacet in facet.ImplementedInterfaces) {
			baseProtocols += ", ";
			baseProtocols += (interfaceFacet.ObjCFacet.Type + protocolSuffix);
		}

        
        #line default
        #line hidden
        
        #line 362 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n//\r\n// Implementation protocol\r\n//\r\n@protocol ");

        
        #line default
        #line hidden
        
        #line 367 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(protocolName));

        
        #line default
        #line hidden
        
        #line 367 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" <");

        
        #line default
        #line hidden
        
        #line 367 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(baseProtocols));

        
        #line default
        #line hidden
        
        #line 367 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(">\r\n\r\n@optional\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 371 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
		
	}// if !writeAux

}

//
// WriteProtocolEnd
//
public void WriteProtocolEnd(CodeFacet facet, bool writeAux = false)
{
	if (!writeAux) {

        
        #line default
        #line hidden
        
        #line 382 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("#endif\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 385 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

    } // if !writeAux

        
        #line default
        #line hidden
        
        #line 387 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n@end\r\n\r\n");

        
        #line default
        #line hidden
        
        #line 391 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

	if (writeAux) {
		WriteModuleFooter();
    }
}


//
// WriteClassStart
//
public void WriteClassStart(CodeFacet facet, string module, bool writeBanner = true)
{
	// Allocate property name list
	this.StaticObjectPropertyStorageNames = new List<string>();

	// prefix defines interface or implementation
	string classPrefix = OutputDeclarationPrefix();
	string superClass = OutputDeclarationSuffix(facet);
	string implementedProtocols = "";

	// implemented protocol support is available but 
	// we may not be quite ready to supply all the framework managed interfaces that
	// are commonly referenced
	bool outputImplementedProtocols = true;
	if (outputImplementedProtocols) {
		implementedProtocols =  OutputImplementedProtocolSuffix(facet);
    }

	 if (writeBanner) {
		WriteModuleBanner(facet, module);
    }

	 if (facet is EnumerationFacet) {

        
        #line default
        #line hidden
        
        #line 424 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n// C enumeration\r\n");

        
        #line default
        #line hidden
        
        #line 427 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

		WriteFacetAsEnumeration((EnumerationFacet)facet);

        
        #line default
        #line hidden
        
        #line 431 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

	}

        
        #line default
        #line hidden
        
        #line 433 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("@");

        
        #line default
        #line hidden
        
        #line 434 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(classPrefix));

        
        #line default
        #line hidden
        
        #line 434 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 434 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(facet.ObjCFacet.Type));

        
        #line default
        #line hidden
        
        #line 434 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(superClass));

        
        #line default
        #line hidden
        
        #line 434 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(implementedProtocols));

        
        #line default
        #line hidden
        
        #line 434 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 435 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
	
	WriteClassSetup(facet);	
}


//
// WriteClassSetup
// 
public void WriteClassSetup(CodeFacet facet)
{
	WritePragmaMark("Setup");

        
        #line default
        #line hidden
        
        #line 446 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\t// obligatory override\r\n\t+ (const char *)monoClassName");

        
        #line default
        #line hidden
        
        #line 448 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(LT));

        
        #line default
        #line hidden
        
        #line 448 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 449 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

	if (OutputFileType == OutputType.Implementation) 
	{
		string name = CodeFacet.NormalizeGenericTypesInManagedIdentifier(facet.NameFromType);
		if (name.IndexOf("NestedGenericClass") >= 0) {
			Console.WriteLine("TypeNamespace {0}", facet.TypeNamespace);
			Console.WriteLine("name {0}", name);
		}

        
        #line default
        #line hidden
        
        #line 457 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\t{\r\n\t\treturn \"");

        
        #line default
        #line hidden
        
        #line 459 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(facet.TypeNamespace));

        
        #line default
        #line hidden
        
        #line 459 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(".");

        
        #line default
        #line hidden
        
        #line 459 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(name));

        
        #line default
        #line hidden
        
        #line 459 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\";\r\n\t}\r\n");

        
        #line default
        #line hidden
        
        #line 461 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

    }

        
        #line default
        #line hidden
        
        #line 463 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\t// obligatory override\r\n\t+ (const char *)monoAssemblyName");

        
        #line default
        #line hidden
        
        #line 465 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(LT));

        
        #line default
        #line hidden
        
        #line 465 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 466 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
	
	if (OutputFileType == OutputType.Implementation) 
	{

        
        #line default
        #line hidden
        
        #line 469 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\t{\r\n\t\treturn \"");

        
        #line default
        #line hidden
        
        #line 471 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(AssemblyFacet.Name));

        
        #line default
        #line hidden
        
        #line 471 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\";\r\n\t}\r\n");

        
        #line default
        #line hidden
        
        #line 473 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

    }
}

//
// WriteClassEnd
//
public void WriteClassEnd(CodeFacet facet)
{
	WriteClassTeardown(facet);	

        
        #line default
        #line hidden
        
        #line 483 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("@end\r\n");

        
        #line default
        #line hidden
        
        #line 485 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

	WriteModuleFooter();
}

//
// WriteClassTeardown
// 
public void WriteClassTeardown(CodeFacet facet)
{
	if (OutputFileType == OutputType.Implementation) 
	{
	WritePragmaMark("Teardown");

        
        #line default
        #line hidden
        
        #line 497 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\t- (void)dealloc\r\n\t{\r\n");

        
        #line default
        #line hidden
        
        #line 500 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

		foreach (string staticObjectPropertyName in StaticObjectPropertyStorageNames)
        {

        
        #line default
        #line hidden
        
        #line 503 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\t\t");

        
        #line default
        #line hidden
        
        #line 504 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(staticObjectPropertyName));

        
        #line default
        #line hidden
        
        #line 504 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" = nil;\r\n");

        
        #line default
        #line hidden
        
        #line 505 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

        }

        
        #line default
        #line hidden
        
        #line 507 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\t}\r\n");

        
        #line default
        #line hidden
        
        #line 509 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"


	this.StaticObjectPropertyStorageNames = null;
    }
}
//
// WriteFacetAsEnumeration
//
public void WriteFacetAsEnumeration(EnumerationFacet enumeration)
{
	string objCEnumType = ObjCTypeNameFromManagedTypeName(enumeration.UnderlyingType);
	string objCType = ObjCTypeNameFromManagedTypeName(enumeration.Type);

	// output the enums as a C typedef enum.
	if (OutputFileType == OutputType.Interface) 
	{

        
        #line default
        #line hidden
        
        #line 525 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("typedef NS_ENUM(");

        
        #line default
        #line hidden
        
        #line 526 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCEnumType));

        
        #line default
        #line hidden
        
        #line 526 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(", enum");

        
        #line default
        #line hidden
        
        #line 526 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCType));

        
        #line default
        #line hidden
        
        #line 526 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(") {\r\n");

        
        #line default
        #line hidden
        
        #line 527 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

		foreach (FieldFacet field in enumeration.Fields) {
			string objCFieldName = ObjCIdentifierFromManagedIdentifier(field.Name);

        
        #line default
        #line hidden
        
        #line 530 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\t");

        
        #line default
        #line hidden
        
        #line 531 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCType));

        
        #line default
        #line hidden
        
        #line 531 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("_");

        
        #line default
        #line hidden
        
        #line 531 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCFieldName));

        
        #line default
        #line hidden
        
        #line 531 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 531 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(field.ConstantValue));

        
        #line default
        #line hidden
        
        #line 531 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(",\r\n");

        
        #line default
        #line hidden
        
        #line 532 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

		}

        
        #line default
        #line hidden
        
        #line 534 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("};\r\n");

        
        #line default
        #line hidden
        
        #line 536 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

    } 

}

//
// WriteFacetAsAccessor
// 
public void WriteFacetAsAccessor(CodeFacet facet, Dictionary<string, object> options = null)
{
	// define getters and setters
	string accessorName = facet.Name;
	string accessorDescription = facet is PropertyFacet ? "property" : "field";
	string getterName = accessorName.FirstCharacterToLower();
	string setterName = "set" + accessorName.FirstCharacterToUpper();
	string accessorType = facet.Type;
	string objCTypeDecl = ObjCTypeDeclFromManagedFacet(facet);
	bool isObjectProperty = ObjCRepresentationIsObject(facet);
	string monoObjectPtr = "MonoObject *";
	
	// some NSObject properties need a bit of TLC
	List<string> baseProperties = new List<string> {"description"};

	// property storage and evaluation
	string propertyAttributes = "";
	string propertyStorage = "_" + getterName;
	if (facet.IsStatic) {
		propertyStorage = "m" + propertyStorage;
		if (isObjectProperty) 
        {
			this.StaticObjectPropertyStorageNames.Add(propertyStorage);
        }
    }
	string doPropertyEqualityTest = "";
	if (isObjectProperty) {
		// test if mono object pointer and property storage reference the same managed object
		doPropertyEqualityTest = string.Format("if ([self object:{0} isEqualToMonoObject:{1}]) return {0};", propertyStorage, ManagedVariableName);
   }

	// instance property.
	if (!facet.IsStatic) {
		string attributes = "nonatomic";

		// object property attributes
		if (ObjCRepresentationIsObject(facet)) {
			attributes += ", strong";
		}
		if (!facet.IsWritable) {
			attributes += ", readonly";
		} 
		propertyAttributes =  String.Format("({0}) ", attributes);
    }

	// create Obj-C representation of managed object
	string managedValueToObjC = ManagedValueToObjc(ManagedVariableName, facet);
	string objCValueToMono = ObjCValueToManaged(ObjCVariableName, objCTypeDecl, facet);
	ObjCTypeAssociation objCTypeAssociate = ObjCTypeAssociate(facet);
	string objCMethodType = !facet.IsStatic ? "-" : "+";

	// form mono method invocation name.
	// a prefix may be required, for instance when calling explicit interface properties.
	string monoMethodPrefix = "";
	if (options != null) {
		if (options.ContainsKey("cAPIMethodPrefix")) {
			monoMethodPrefix = (string)options["cAPIMethodPrefix"];
        }
    }
	string monoInvocationName = monoMethodPrefix + accessorName;

	// Info comment

        
        #line default
        #line hidden
        
        #line 606 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n\t// Managed ");

        
        #line default
        #line hidden
        
        #line 608 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(accessorDescription));

        
        #line default
        #line hidden
        
        #line 608 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" name : ");

        
        #line default
        #line hidden
        
        #line 608 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(accessorName));

        
        #line default
        #line hidden
        
        #line 608 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n\t// Managed ");

        
        #line default
        #line hidden
        
        #line 609 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(accessorDescription));

        
        #line default
        #line hidden
        
        #line 609 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" type : ");

        
        #line default
        #line hidden
        
        #line 609 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(WriteFacetTypeInfo(facet)));

        
        #line default
        #line hidden
        
        #line 609 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 610 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
	
	// Interface 
	if (OutputFileType == OutputType.Interface) 
	{
		// instance property
		if (!facet.IsStatic) 
		{
			// avoid overriding NSObject properties as we may generate an attribute mismmatch and
			// trigger a storm of warnings
			string prefix = "";
			if (baseProperties.Contains(getterName)) {
				prefix = "// Avoid potential property attribute clash // ";
			}

        
        #line default
        #line hidden
        
        #line 623 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("    ");

        
        #line default
        #line hidden
        
        #line 624 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(prefix));

        
        #line default
        #line hidden
        
        #line 624 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("@property ");

        
        #line default
        #line hidden
        
        #line 624 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(propertyAttributes));

        
        #line default
        #line hidden
        
        #line 624 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCTypeDecl));

        
        #line default
        #line hidden
        
        #line 624 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 624 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(getterName));

        
        #line default
        #line hidden
        
        #line 624 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 625 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
	  
			return;
        }    
	} 
	else 
	{
		// implementation

		// instance property
		if (!facet.IsStatic) 
		{
			// synthesize ivar property storage

        
        #line default
        #line hidden
        
        #line 637 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("    @synthesize ");

        
        #line default
        #line hidden
        
        #line 638 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(getterName));

        
        #line default
        #line hidden
        
        #line 638 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 638 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(propertyStorage));

        
        #line default
        #line hidden
        
        #line 638 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 639 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
		
		} else { // declare static property storage

        
        #line default
        #line hidden
        
        #line 641 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("    static ");

        
        #line default
        #line hidden
        
        #line 642 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCTypeDecl));

        
        #line default
        #line hidden
        
        #line 642 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 642 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(propertyStorage));

        
        #line default
        #line hidden
        
        #line 642 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 643 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
      
		}
    }

	//
	// write getter method
	//
	if (facet.IsReadable) 
	{

        
        #line default
        #line hidden
        
        #line 652 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("    ");

        
        #line default
        #line hidden
        
        #line 653 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCMethodType));

        
        #line default
        #line hidden
        
        #line 653 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" (");

        
        #line default
        #line hidden
        
        #line 653 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCTypeDecl));

        
        #line default
        #line hidden
        
        #line 653 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(")");

        
        #line default
        #line hidden
        
        #line 653 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(getterName));

        
        #line default
        #line hidden
        
        #line 653 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(LT));

        
        #line default
        #line hidden
        
        #line 653 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 654 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
		
		if (OutputFileType == OutputType.Implementation) 
		{
			if (facet is PropertyFacet) { 
				// thunking : primitive value types and enumerations are returned by value.
				// other value types, such as DateTime are returned as boxed values
				string thunkTypeDecl = null;
				if (ObjCRepresentationIsPrimitive(facet)) {
					managedValueToObjC = "monoObject";
					thunkTypeDecl = objCTypeDecl;
				} else {
					thunkTypeDecl = "MonoObject *";
				}

				// note that the thunk is valid only for a specific class instance.
				// if the obj-C receiver represents a managed interface then the cached thunk
				// must be regenerated if the thunk id invalid for the receiver mono class.
				if (!facet.IsStatic) {

        
        #line default
        #line hidden
        
        #line 672 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("    {\r\n\t\ttypedef ");

        
        #line default
        #line hidden
        
        #line 674 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(thunkTypeDecl));

        
        #line default
        #line hidden
        
        #line 674 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(@" (*Thunk)(MonoObject *, MonoObject**);
		static Thunk thunk;
		static MonoClass *thunkClass;
		MonoObject *monoException = NULL;
		if (!thunk || thunkClass != self.monoClass) {
			thunkClass = self.monoClass;
			MonoMethod *monoMethod = GetPropertyGetMethod(thunkClass, """);

        
        #line default
        #line hidden
        
        #line 680 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(monoInvocationName));

        
        #line default
        #line hidden
        
        #line 680 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\");\r\n\t\t\tthunk = (Thunk)mono_method_get_unmanaged_thunk(monoMethod);\r\n\t\t}\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 683 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(thunkTypeDecl));

        
        #line default
        #line hidden
        
        #line 683 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" monoObject = thunk(self.monoObject, &monoException);\r\n\t\tif (monoException != NUL" +
        "L) @throw(NSExceptionFromMonoException(monoException, @{}));\r\n");

        
        #line default
        #line hidden
        
        #line 685 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

				} // end non static property
				else 
				{ // static property

        
        #line default
        #line hidden
        
        #line 689 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("    {\r\n\t\ttypedef ");

        
        #line default
        #line hidden
        
        #line 691 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(thunkTypeDecl));

        
        #line default
        #line hidden
        
        #line 691 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(@" (*Thunk)(MonoObject**);
		static Thunk thunk;
		static MonoClass *thunkClass;
		MonoObject *monoException = NULL;
		if (!thunk || thunkClass != self.monoClass) {
			thunkClass = self.monoClass;
			MonoMethod *monoMethod = GetPropertyGetMethod(thunkClass, """);

        
        #line default
        #line hidden
        
        #line 697 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(monoInvocationName));

        
        #line default
        #line hidden
        
        #line 697 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\");\r\n\t\t\tthunk = (Thunk)mono_method_get_unmanaged_thunk(monoMethod);\r\n\t\t}\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 700 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(thunkTypeDecl));

        
        #line default
        #line hidden
        
        #line 700 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" monoObject = thunk(&monoException);\r\n\t\tif (monoException != NULL) @throw(NSExcep" +
        "tionFromMonoException(monoException, @{}));\r\n");

        
        #line default
        #line hidden
        
        #line 702 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

				} // end static property
			} // end thunking property
			else 
			{  // field 
				string getFormat;
				if (!facet.IsStatic) {
					getFormat = "[self getMonoField:\"{0}\"]";
				} else {
					getFormat = "[[self class] getMonoClassField:\"{0}\"]";
				}
				string getExpression = String.Format(getFormat, monoInvocationName);

        
        #line default
        #line hidden
        
        #line 714 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("    {\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 716 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(monoObjectPtr));

        
        #line default
        #line hidden
        
        #line 716 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(ManagedVariableName));

        
        #line default
        #line hidden
        
        #line 716 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 716 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(getExpression));

        
        #line default
        #line hidden
        
        #line 716 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 717 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
	
			} // end field 

			if (isObjectProperty) // object equality test
			{

        
        #line default
        #line hidden
        
        #line 722 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\t\t");

        
        #line default
        #line hidden
        
        #line 723 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(doPropertyEqualityTest));

        
        #line default
        #line hidden
        
        #line 723 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\t\t\t\t\t\r\n");

        
        #line default
        #line hidden
        
        #line 724 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
	
			} // end object equality test

        
        #line default
        #line hidden
        
        #line 726 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\t\t");

        
        #line default
        #line hidden
        
        #line 727 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(propertyStorage));

        
        #line default
        #line hidden
        
        #line 727 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 727 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(managedValueToObjC));

        
        #line default
        #line hidden
        
        #line 727 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(";\r\n\r\n\t\treturn ");

        
        #line default
        #line hidden
        
        #line 729 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(propertyStorage));

        
        #line default
        #line hidden
        
        #line 729 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(";\r\n\t}\r\n");

        
        #line default
        #line hidden
        
        #line 731 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
	
		} // end implementation
   } // end isReadable

	//
	// write setter method
	//
	if (facet.IsWritable) 
	{


        
        #line default
        #line hidden
        
        #line 741 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("    ");

        
        #line default
        #line hidden
        
        #line 742 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCMethodType));

        
        #line default
        #line hidden
        
        #line 742 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" (void)");

        
        #line default
        #line hidden
        
        #line 742 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(setterName));

        
        #line default
        #line hidden
        
        #line 742 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(":(");

        
        #line default
        #line hidden
        
        #line 742 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCTypeDecl));

        
        #line default
        #line hidden
        
        #line 742 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(")");

        
        #line default
        #line hidden
        
        #line 742 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(ObjCVariableName));

        
        #line default
        #line hidden
        
        #line 742 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(LT));

        
        #line default
        #line hidden
        
        #line 742 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 743 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

		if (OutputFileType == OutputType.Implementation) 
		{
			//
			// Property setter
			//
			if (facet is PropertyFacet) {
				string thunkArgTypeDecl, thunkArg;
				if (ObjCRepresentationIsPrimitive(facet)) {
					thunkArgTypeDecl = objCTypeDecl;
					thunkArg = ObjCVariableName;
				} else {
					thunkArgTypeDecl = "MonoObject *";
					thunkArg = string.Format("[{0} monoObject]", ObjCVariableName);
				} 
				if (!facet.IsStatic) {

        
        #line default
        #line hidden
        
        #line 759 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\t{\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 761 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(propertyStorage));

        
        #line default
        #line hidden
        
        #line 761 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 761 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(ObjCVariableName));

        
        #line default
        #line hidden
        
        #line 761 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(";\r\n\t\ttypedef void (*Thunk)(MonoObject *, ");

        
        #line default
        #line hidden
        
        #line 762 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(thunkArgTypeDecl));

        
        #line default
        #line hidden
        
        #line 762 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(", MonoObject**);\r\n\t\tstatic Thunk thunk;\r\n\t\tstatic MonoClass *thunkClass;\r\n\t\tif (!" +
        "thunk || thunkClass != self.monoClass) {\r\n\t\t\tthunkClass = self.monoClass;\r\n\t\t\tMo" +
        "noMethod *monoMethod = GetPropertySetMethod(thunkClass, \"");

        
        #line default
        #line hidden
        
        #line 767 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(monoInvocationName));

        
        #line default
        #line hidden
        
        #line 767 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\");\r\n\t\t\tthunk = (Thunk)mono_method_get_unmanaged_thunk(monoMethod);\r\n\t\t}\r\n\t\tMonoO" +
        "bject *monoException = NULL;\r\n\t\tthunk(self.monoObject, ");

        
        #line default
        #line hidden
        
        #line 771 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(thunkArg));

        
        #line default
        #line hidden
        
        #line 771 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(", &monoException);\r\n\t\tif (monoException != NULL) @throw(NSExceptionFromMonoExcept" +
        "ion(monoException, @{}));\r\n\t}\r\n");

        
        #line default
        #line hidden
        
        #line 774 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

				} // end non static
				else 
				{ // static

        
        #line default
        #line hidden
        
        #line 778 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\t{\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 780 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(propertyStorage));

        
        #line default
        #line hidden
        
        #line 780 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 780 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(ObjCVariableName));

        
        #line default
        #line hidden
        
        #line 780 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(";\r\n\t\ttypedef void (*Thunk)(");

        
        #line default
        #line hidden
        
        #line 781 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(thunkArgTypeDecl));

        
        #line default
        #line hidden
        
        #line 781 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(", MonoObject**);\r\n\t\tstatic Thunk thunk;\r\n\t\tstatic MonoClass *thunkClass;\r\n\t\tif (!" +
        "thunk || thunkClass != self.monoClass) {\r\n\t\t\tthunkClass = self.monoClass;\r\n\t\t\tMo" +
        "noMethod *monoMethod = GetPropertySetMethod(thunkClass, \"");

        
        #line default
        #line hidden
        
        #line 786 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(monoInvocationName));

        
        #line default
        #line hidden
        
        #line 786 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\");\r\n\t\t\tthunk = (Thunk)mono_method_get_unmanaged_thunk(monoMethod);\r\n\t\t}\r\n\t\tMonoO" +
        "bject *monoException = NULL;\r\n\t\tthunk(");

        
        #line default
        #line hidden
        
        #line 790 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(thunkArg));

        
        #line default
        #line hidden
        
        #line 790 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(", &monoException);\r\n\t\tif (monoException != NULL) @throw(NSExceptionFromMonoExcept" +
        "ion(monoException, @{}));\r\n\t}\r\n");

        
        #line default
        #line hidden
        
        #line 793 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

				} // end static
			} // end property 
			else 
			{ 
				//
				// field setter
				//
				string setFormat;
				if (!facet.IsStatic) {
					setFormat = "[self setMonoField:\"{0}\" valueObject:{1}]";
				} else {
					setFormat = "[[self class] setMonoClassField:\"{0}\" valueObject:{1}]";
				}
				string setExpression = String.Format(setFormat, monoInvocationName, ManagedVariableName);

        
        #line default
        #line hidden
        
        #line 808 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\t{\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 810 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(propertyStorage));

        
        #line default
        #line hidden
        
        #line 810 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 810 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(ObjCVariableName));

        
        #line default
        #line hidden
        
        #line 810 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(";\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 811 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(monoObjectPtr));

        
        #line default
        #line hidden
        
        #line 811 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(ManagedVariableName));

        
        #line default
        #line hidden
        
        #line 811 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 811 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCValueToMono));

        
        #line default
        #line hidden
        
        #line 811 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(";\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 812 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(setExpression));

        
        #line default
        #line hidden
        
        #line 812 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(";          \r\n\t}\r\n");

        
        #line default
        #line hidden
        
        #line 814 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

			} // end field
		}  // end Implementation
	} // end IsWritable
}

//
// WriteFacetAsMethod
//
public void WriteFacetAsMethod(MethodFacet facet, Dictionary<string, object> options = null)
{
	// In order to ensure compilation of an assembly and its references 
	// the generated code must resolve all types.
	//
	// The generation of a complete set of methods is obviously desirable
	// but in some cases may not be achievable if a unique method signature 
	// cannot be obtained. 

	// if the method is a duplicate (ie: name, parameter types, return type) 
	// then we have no option but to omit it
	if (facet.IsDuplicateSignatureMethod) 
	{
		this.Warning("Duplicate method omitted : " + facet.Name);
		return;
	}

	// if the facet is overloaded on its signature and differs only in its
	// return type then omit it.
	// This can occur with explicit operators.
	// At present it is unknown if these can be called via the embedded API.
	if (facet.IsOverloadedSignatureMethod) 
	{
		this.Warning("Overloaded signature method omitted : " + facet.Name);
		return;
    }

	string objCMethodFormat = null;
	bool isConstructorMethod = (facet.Name == null);	// constructor has no method name
	string objCMethodType = null;

	// Method name. We do some rudimentary processing to prevent troublesome behaviour.
	// We may have to prefix certian method names to conform to ARC's semantics
	// see https://stackoverflow.com/questions/22529454/simple-rules-for-naming-methods-compatible-with-arc-naming-conventions
	string monoMethodName = facet.Name;
	string objCMethodName = monoMethodName.FirstCharacterToLower();
	List<string> unsafeObjCMethodNames = null;
	List<string> unsafeObjCInitMethodNamesStartingWith = null;
	if (facet.IsStatic || isConstructorMethod) 
	{
		objCMethodType = "+";
		if (facet.Parameters.Count == 0) 
		{
			unsafeObjCMethodNames = new List<string> {
												"load",	// +load will get called when the unmanaged framework loads. The managed code will likely not expect this.
												"initialize",	
												"alloc",
												"new",
												"class",
												"superclass"
											};
		}
	}
	else 
	{
		unsafeObjCInitMethodNamesStartingWith = new List<string> {
												"init" 
		};
		objCMethodType = "-";
	}
	if (unsafeObjCMethodNames != null && unsafeObjCMethodNames.Contains(objCMethodName))
	{
		objCMethodName += "_";
	}

	// methods beginning with init are expected to return a type related to the receiver
	if (unsafeObjCInitMethodNamesStartingWith != null && 
		facet.Type != "System.Void" &&
		unsafeObjCInitMethodNamesStartingWith.Any(p => objCMethodName.StartsWith(p, false, null)))
	{
			objCMethodName = "db_" + objCMethodName;
	}

	// return type
	string objCTypeDecl = ObjCTypeDeclFromManagedFacet(facet);
	if (facet.IsInterface) 
	{
		objCTypeDecl = ObjCConformingTypeFromObjCTypeDecl(objCTypeDecl, true);
	}

	string managedValueToObjC = null;

	// instance method requires a name and type
	if (!isConstructorMethod) 
	{

		// create Obj-C representation of mono object
		managedValueToObjC = ManagedValueToObjc(ManagedVariableName, facet);

		if (!facet.IsStatic) 
		{
			objCMethodFormat = "[self invokeMonoMethod:\"{0}({1})\" withNumArgs:{2}]";
		} 
		else 
		{
			objCMethodFormat = "[self invokeMonoClassMethod:\"{0}({1})\" withNumArgs:{2}]";
		}
	}
	 else 
	{

		// this looks like a default constructor
		if (facet.Parameters.Count() == 0) 
		{
			return;
        }

		objCMethodName = "new";

		// a constructor requires no explicit name or type
		objCMethodFormat = "[[self alloc] initWithSignature:\"{1}\" withNumArgs:{2}]";
    }

	// build the parameters
	StringBuilder monoSigBuilder = new StringBuilder();
	StringBuilder objCParameterBuilder = new StringBuilder();
	StringBuilder invokeArgsBuilder = new StringBuilder();
	StringBuilder referencePreProcessBuilder = new StringBuilder();
	StringBuilder referencePostProcessBuilder = new StringBuilder();

	int idx = 0;
	foreach (ParameterFacet parameter in facet.Parameters) 
	{

		// if the mono parameters is passed by ref then strip
		// the suffix to enable type association
		string monoParameterType = parameter.Type;
		if (parameter.IsByRef || parameter.IsPointer) 
		{
			monoParameterType = parameter.ElementType;
      }

		//
		// build the ObjC method interleaved parameter representation
		// eg: name1:(int32_t)p1 name2:(int64_t)p2 name3:(NSString *)p3
		//
		string objCParamTypeDecl = null;
		bool objCParameterIsObject = true;

		//
		// Get the ObjC type associated with the parameter.
		//
		ObjCTypeAssociation objCTypeAssociate = ObjCTypeAssociate(parameter);
		ManagedTypeAssociation managedTypeAssociate = null;
		if (objCTypeAssociate != null) 
		{
			//
			// If the parameter is an array, say Int64[], then its Obj-C rep will be System.Array
			// The mono type association however must reflect the represented type, Int64.
			//
			if (parameter.IsArray) 
			{
				ObjCTypeAssociation objCRepresentedTypeAssociate = ObjCTypeAssociate(parameter.ElementType);
				if (objCRepresentedTypeAssociate != null) 
				{
					managedTypeAssociate = objCRepresentedTypeAssociate.ManagedTypeAssociate;
                }
			}
			
			if (managedTypeAssociate == null) 
			{
				managedTypeAssociate = objCTypeAssociate.ManagedTypeAssociate;
			}

			objCParamTypeDecl =  objCTypeAssociate.ObjCTypeDecl;
			objCParameterIsObject = objCTypeAssociate.IsNSObject;
		} 
		else 
		{
			//
			// Generate default objC representations
			//
			objCParamTypeDecl = ObjCTypeDeclFromManagedFacet(parameter);
			objCParameterIsObject = ObjCRepresentationIsObject(parameter);
        }

		// if parameter is an interface then use adoption conforming type ie: id <typename>
		if (parameter.IsInterface) {
			objCParamTypeDecl = ObjCConformingTypeFromObjCTypeDecl(objCParamTypeDecl, false);
		}
		if (parameter.IsByRef || parameter.IsPointer) 
		{
			objCParamTypeDecl += "*";	// add additional indirection
        }

		//
		// Build the mono method argument invocation signature
		//
		if (idx > 0) monoSigBuilder.Append(",");
		string monoParameterTypeInvoke = null;
 
		// if type is a GenericParameter
		if (parameter.IsGenericParameter) {

			// generic parameters must have an associate
			if (managedTypeAssociate == null) {
				throw new Exception("Missing managed type association for generic parameter."); 
			}

			monoParameterTypeInvoke = managedTypeAssociate.ManagedTypeInvoke;
			if (parameter.IsArray)  
			{
				monoParameterTypeInvoke += "[]";
         }
			
			// in order for the C api to substitute the correct type at run time
			// the generic parameter position needs to be indicated.
			monoParameterTypeInvoke = string.Format(monoParameterTypeInvoke, parameter.GenericParameterPosition);
		} else {
			monoParameterTypeInvoke = ManagedTypeInvokeFromManagedType(monoParameterType);
		}

		// Note that we use a separate variable to hold the actual type sig used in the in mono_method_desc call
		// as the signature may need to be specfically modified for the mono_method_desc API.
		string monoParameterTypeInvoke_ = monoParameterTypeInvoke;

		// The mono_method_desc * APIs prefix nested classes with a '/' rather than a '+'
		// The approach used here is trivial and is likely fragile.
		// We probably need a separate mono param type builder like that found in debug-helpers.c append_class_name().
		// Note that Delegates will present as nested classes.
		if (parameter.IsNested) {
			monoParameterTypeInvoke_ = monoParameterTypeInvoke_.Replace("+", "/");
		}

		// add type signature and access modifier
		monoSigBuilder.Append(monoParameterTypeInvoke_);
		if (parameter.IsPointer) 
		{
			monoSigBuilder.Append("*");
		}
		if (parameter.IsByRef) 
		{
			monoSigBuilder.Append("&");	// the signature needs to express by ref
      }

		// Build ObjC parameter name.
		// In order to represent overloaded methods effectively the 
		// ObjC paramter name is constructed as follows:
		// Managed parameter name + Managed parameter type + Ref
		string objCParamName = ObjCIdentifierFromManagedIdentifier(parameter.Name);
		
		// If the method is overloaded by parameter then make the ObjC method
		// name unique by including type info in the name.
		//
		// Managed methods are overloaded by name only.
		// The Obj-C metjods representation uses interleaved parameters which may
		// be sufficient to produce a unique method signature.
		//
		// If however a managed method overload differs only in the type of its parameters 
		// (the managed method name, parameter count and parameter names all being equal)
		// then the Obj-C interleaved parameters will include type info.
		string objCParamOverloadSuffix = "";
		if (facet.IsOverloadedParameterMethod) 
		{
			// We adopt a minimal as opposed to a full type repesentation here in order
			// to minimize the parameter length.
			// Time will tell how it flies.
			objCParamOverloadSuffix = ObjCMinimalIdentifierFromManagedIdentifier(monoParameterTypeInvoke);
      }
		if (parameter.IsByRef) 
		{
			objCParamOverloadSuffix += "Ref";
        }
		if (objCParamOverloadSuffix.Length > 0) 
		{
			objCParamName += objCParamOverloadSuffix.FirstCharacterToUpper();
        }

		// append the complete interleaved parameter expression
		if (idx == 0) 
		{
			if (AppendFirstArgSignatureToMethodName) 
			{
				// the leading underscore helps identify the preceding characters as the managed method name
				objCMethodName += "_with";
				objCParameterBuilder.AppendFormat("{0}", objCParamName.FirstCharacterToUpper());
            } 
        } 
		else 
		{
			objCParameterBuilder.AppendFormat(" {0}", objCParamName.FirstCharacterToLower());
        }
		objCParameterBuilder.AppendFormat(":({0})p{1}", objCParamTypeDecl, idx + 1);

		//
		// build the mono invocation argument representation
		// eg: DB_VALUE(p1), DB_VALUE(p2), [p3 monoRTInvokeArg]
		//
		string argFormat = null;
		if (idx > 0) invokeArgsBuilder.Append(", ");
		if (objCParameterIsObject) 
		{
			if (parameter.IsByRef) {
				argFormat = "&refPtr{0}";	// use reference pointer
            } else {
				argFormat = "[p{0} monoRTInvokeArg]";
            }
        } 
		else 
		{
			if (parameter.IsByRef || parameter.IsPointer) 
			{
				argFormat = "p{0}";	// just pass the pointer
            } 
			else 
			{
				argFormat = "DB_VALUE(p{0})";	// DB_VALUE equates to &
            }
		}
		invokeArgsBuilder.AppendFormat(argFormat, idx + 1);

		//
		// Build reference parameter pre and post process assignment statements
		//
		// Reference parameters need to be assigned to temporary variables
		// to allow for their mutation
		//
		if (objCParameterIsObject && parameter.IsByRef) {

			// dereference and assign temporary variable
			string preProcess = string.Format("void *refPtr{0} = [*p{0} monoRTInvokeArg];{1}", idx + 1, Environment.NewLine);
			referencePreProcessBuilder.Append(preProcess);

			// create new object subclass for reference 
			string postProcess = string.Format("*p{0} = [System_Object bestObjectWithMonoObject:refPtr{0}];{1}", idx + 1, Environment.NewLine);
			referencePostProcessBuilder.Append(postProcess);
        }

		idx++;
    }

	// finalize argument list representations
	string monoMethodSig = monoSigBuilder.ToString();
	string objCMethodParameters = objCParameterBuilder.ToString();
	string invokeArgs = facet.Parameters.Count().ToString();
	if (facet.Parameters.Count() > 0) 
	{
		invokeArgs += ", " + invokeArgsBuilder.ToString();
    }

	// form mono method invocation name.
	// a prefix may be required, for instance when calling explicit interface methods.
	string monoMethodPrefix = "";
	if (options != null) {
		if (options.ContainsKey("cAPIMethodPrefix")) {
			monoMethodPrefix = (string)options["cAPIMethodPrefix"];
        }
    }
	string monoInvocationName = monoMethodPrefix + monoMethodName;

	string getExpression = String.Format(objCMethodFormat, monoInvocationName, monoMethodSig, invokeArgs) + ";";
	if (referencePostProcessBuilder.Length > 0) {
		getExpression += Environment.NewLine;
    }

	// validation
	if (isConstructorMethod && String.IsNullOrEmpty(monoMethodSig)) throw new Exception("Mono method argument signature is empty");
	if (String.IsNullOrEmpty(objCTypeDecl)) throw new Exception("ObjC type Declaration is empty");    
	if (String.IsNullOrEmpty(objCMethodName)) throw new Exception("Method name is empty"); 
	if (String.IsNullOrEmpty(getExpression)) throw new Exception("Get expression is empty"); 

	//
	// write method
	//

        
        #line default
        #line hidden
        
        #line 1187 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n\t// Managed method name : ");

        
        #line default
        #line hidden
        
        #line 1189 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(isConstructorMethod ? ".ctor" : monoMethodName));

        
        #line default
        #line hidden
        
        #line 1189 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n\t// Managed return type : ");

        
        #line default
        #line hidden
        
        #line 1190 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(WriteFacetTypeInfo(facet)));

        
        #line default
        #line hidden
        
        #line 1190 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n\t// Managed param types : ");

        
        #line default
        #line hidden
        
        #line 1191 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(WriteFacetTypeInfo(facet.Parameters)));

        
        #line default
        #line hidden
        
        #line 1191 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n    ");

        
        #line default
        #line hidden
        
        #line 1192 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCMethodType));

        
        #line default
        #line hidden
        
        #line 1192 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" (");

        
        #line default
        #line hidden
        
        #line 1192 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCTypeDecl));

        
        #line default
        #line hidden
        
        #line 1192 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(")");

        
        #line default
        #line hidden
        
        #line 1192 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCMethodName));

        
        #line default
        #line hidden
        
        #line 1192 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCMethodParameters));

        
        #line default
        #line hidden
        
        #line 1192 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(LT));

        
        #line default
        #line hidden
        
        #line 1192 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 1193 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
		
	if (OutputFileType == OutputType.Implementation) 
	{
		// type warnings
		GenerateTypeWarnings(facet);
		GenerateTypeWarnings(facet.Parameters);

        
        #line default
        #line hidden
        
        #line 1199 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("    {\r\n");

        
        #line default
        #line hidden
        
        #line 1201 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

		if (objCTypeDecl == "void") 
		{

        
        #line default
        #line hidden
        
        #line 1204 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\t\t");

        
        #line default
        #line hidden
        
        #line 1205 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(referencePreProcessBuilder.ToString()));

        
        #line default
        #line hidden
        
        #line 1205 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 1206 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(getExpression));

        
        #line default
        #line hidden
        
        #line 1206 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n        ");

        
        #line default
        #line hidden
        
        #line 1207 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(referencePostProcessBuilder.ToString()));

        
        #line default
        #line hidden
        
        #line 1207 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 1208 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

		} 
		else if (isConstructorMethod) 
		{

        
        #line default
        #line hidden
        
        #line 1212 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\t\t");

        
        #line default
        #line hidden
        
        #line 1213 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(referencePreProcessBuilder.ToString()));

        
        #line default
        #line hidden
        
        #line 1213 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 1214 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(objCTypeDecl));

        
        #line default
        #line hidden
        
        #line 1214 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" object = ");

        
        #line default
        #line hidden
        
        #line 1214 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(getExpression));

        
        #line default
        #line hidden
        
        #line 1214 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n        ");

        
        #line default
        #line hidden
        
        #line 1215 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(referencePostProcessBuilder.ToString()));

        
        #line default
        #line hidden
        
        #line 1215 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n        return object;\r\n");

        
        #line default
        #line hidden
        
        #line 1217 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

		} 
		else 
		{
			if (String.IsNullOrEmpty(managedValueToObjC)) throw new Exception("Mono value to ObjC expression is empty"); 

        
        #line default
        #line hidden
        
        #line 1222 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\t\t");

        
        #line default
        #line hidden
        
        #line 1223 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(referencePreProcessBuilder.ToString()));

        
        #line default
        #line hidden
        
        #line 1223 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n\t\tMonoObject *");

        
        #line default
        #line hidden
        
        #line 1224 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(ManagedVariableName));

        
        #line default
        #line hidden
        
        #line 1224 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 1224 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(getExpression));

        
        #line default
        #line hidden
        
        #line 1224 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n\t\t");

        
        #line default
        #line hidden
        
        #line 1225 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(referencePostProcessBuilder.ToString()));

        
        #line default
        #line hidden
        
        #line 1225 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("\r\n\t\treturn ");

        
        #line default
        #line hidden
        
        #line 1226 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(managedValueToObjC));

        
        #line default
        #line hidden
        
        #line 1226 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 1227 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
	
		}// if objCTypeDecl

        
        #line default
        #line hidden
        
        #line 1229 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"
this.Write("    }\r\n");

        
        #line default
        #line hidden
        
        #line 1231 "C:\Users\Jonathan\Documents\Dubrovnik\dotNET\Dubrovnik.Tools\Dubrovnik.Tools\Net2ObjC.tt"

	} // if Implementation
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class Net2ObjCBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
